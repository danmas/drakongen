package cb.dfs.trail;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.Authenticator;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLDecoder;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.xml.datatype.Duration;

import org.apache.log4j.Logger;

import com.oracle.xmlns.oxp.service.v2.AccessDeniedException_Exception;
import com.oracle.xmlns.oxp.service.v2.InvalidParametersException_Exception;
import com.oracle.xmlns.oxp.service.v2.OperationFailedException_Exception;
import com.oracle.xmlns.oxp.service.v2.ReportRequest;
import com.oracle.xmlns.oxp.service.v2.ReportResponse;
import com.oracle.xmlns.oxp.service.v2.ReportService;
import com.oracle.xmlns.oxp.service.v2.ReportService_Service;

import cb.dfs.trail.common.Constants;
import cb.dfs.trail.obiee.ObieeManager;
import cb.dfs.trail.obiee.ObieeManagerConfigurer;
import cb.dfs.trail.obiee.ObieeManagerFactory;
import cb.dfs.trail.obiee.ObieeConfiguration;
import cb.dfs.trail.utils.Strings;

public class TrailObiee extends TrailBase {

	//final static Logger logger = //logger.getLogger(TrailObiee.class);
		
	String bi_server_or_publisher = null;
	String obiee_host = null;
	String obiee_port = null;
	String obiee_user = null;
	String obiee_auth = null;
	
	String report_full_path = null;
	String bad_strings = null;
	String body = "";

	//boolean is_read_page = true;

	public TrailObiee(String trail_key) throws Exception {
		super("", trail_key, Constants.TT_OBIEE, "", "0", "0", "0");
	}

	public TrailObiee(String run_agent, String trail_key, String description, String _bi_server_or_publisher,
			String _obiee_host, String _obiee_port, String _obiee_user, String _obiee_password, String _report_full_path,
			String _bad_strings, String max_duration_in_sec,
			String launch_period_in_sec, String control_time_delay_in_sec) throws Exception {
		super(run_agent, trail_key, Constants.TT_OBIEE, description, max_duration_in_sec, launch_period_in_sec,
				control_time_delay_in_sec);
		bi_server_or_publisher = _bi_server_or_publisher;
		report_full_path = _report_full_path;
		bad_strings = _bad_strings;
		//is_read_page = _is_read_page;
		obiee_host = _obiee_host;
		obiee_port = _obiee_port;
		obiee_user = _obiee_user;
		obiee_auth = _obiee_password;
	}

	public TrailObiee(String run_agent, String trail_key, String description, String _bi_server_or_publisher,
			String _report_full_path, String _bad_strings, String max_duration_in_sec,
			String launch_period_in_sec, String control_time_delay_in_sec) throws Exception {
		super(run_agent, trail_key, Constants.TT_OBIEE, description, max_duration_in_sec, launch_period_in_sec,
				control_time_delay_in_sec);
		bi_server_or_publisher = _bi_server_or_publisher;
		report_full_path = _report_full_path;
		bad_strings = _bad_strings;
		//is_read_page = _is_read_page;
	}

	@Override
	public void setParam(String param, String value) throws Exception {
		switch (param.trim().toLowerCase()) {
		case "report_full_path":
			report_full_path = value;
			break;
		case "bad_strings":
			bad_strings = value;
			break;
		case "obiee_host":
			obiee_host = value;
			break;
		case "obiee_port":
			obiee_port = value;
			break;
		case "obiee_user":
			obiee_user = value;
			break;
		case "obiee_auth":
			obiee_auth = value;
			break;
		default:
			try {
				super.setParam(param, value);
			} catch (Exception ex) {
				throw new Exception("Неправильно задано имя параметра <" + param + "> или значение <" + value + ">"
						+ "\nИсключение в  cb.dfs.trail.TrailObiee.setParam()");
			}
		}
	}

	@Override
	public String toString() {
		return "TrailObiee [bi_server_or_publisher=" + bi_server_or_publisher + ", obiee_host=" + obiee_host
				+ ", obiee_port=" + obiee_port + ", obiee_user=" + obiee_user + ", obiee_auth=" + obiee_auth
				+ ", report_full_path=" + report_full_path + ", bad_strings=" + bad_strings + "";
	}

	@Override
	public void overwrite(Connection conn) throws Exception {

		super.overwrite(conn, "v_trails_obiee");

		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(
					"update v_trails_obiee " + " set bi_server_or_publisher=?, report_full_path=?, bad_strings=? "
							+ ", obiee_host=?, obiee_port=?, obiee_user=?, obiee_auth=? " + " where trail_key=?");
			int i = 1;
			stmt.setString(i++, bi_server_or_publisher);

			stmt.setString(i++, report_full_path);
			Clob myClob3 = conn.createClob();
			myClob3.setString(1, bad_strings);
			stmt.setClob(i++, myClob3);

			stmt.setString(i++, obiee_host);
			stmt.setString(i++, obiee_port);
			stmt.setString(i++, obiee_user);
			stmt.setString(i++, obiee_auth);
			stmt.setString(i++, trail_key);

			int cnt = stmt.executeUpdate();
			if (cnt != 1) {
				throw new Exception("Не удалось сделать запись.");
			}

			stmt.close();
		} catch (SQLException se) {
			String str = "Ошибка " + se.getMessage() + "\nSQL исключение в TrailObiee.write()";
			throw new Exception(str);
		} catch (Exception e) {
			String str = "Ошибка " + e.getMessage() + "\nИсключение в TrailObiee.write()";
			throw new Exception(str);
		} finally {
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
			} 
		} 
	}

	@Override
	public void read(Connection conn) throws Exception {

		super.read(conn);

		PreparedStatement stmt = null;
		try {
			stmt = conn.prepareStatement("select bi_server_or_publisher, report_full_path, bad_strings"
					+ ", obiee_host, obiee_port, obiee_user, obiee_auth " + " from V_TRAILS_OBIEE"
					+ " where trail_key=?");
			stmt.setString(1, trail_key);
			ResultSet rs = stmt.executeQuery();
			int cnt = 0;
			while (rs.next()) {
				cnt++;
				bi_server_or_publisher = rs.getString("bi_server_or_publisher");
				report_full_path = rs.getString("report_full_path");
				bad_strings = rs.getString("bad_strings");
				
				obiee_host = rs.getString("obiee_host");
				obiee_port = rs.getString("obiee_port");
				obiee_user = rs.getString("obiee_user");
				obiee_auth = rs.getString("obiee_auth");
			}
			rs.close();
			stmt.close();
			if (cnt != 1) {
				String str = "Должна быть одна запись для операции проверки <" + trail_key + ">.";
				throw new Exception(str);
			}
		} catch (SQLException se) {
			String str = "Ошибка " + se.getMessage() + "\nSQL исключение в TrailObiee.read()";
			throw new Exception(str);
		} catch (Exception e) {
			String str = "Ошибка " + e.getMessage() + "\nИсключение в TrailObiee.read()";
			throw new Exception(str);
		} finally {
			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException se2) {
			}
		}
	}

	
	protected boolean has_bad_string() {
		if (bad_strings != null && bad_strings.trim().length() > 0) {
			List<String> bsm = new ArrayList<String>();
			Strings.fillValueList(bad_strings, bsm, Constants.HTTP_BADSTRINGS_DELIMITER);
			for (String val : bsm) {
				//logger.debug("-- bad string val = " + val);
				debug(getDebugInfo()+"-- bad string val = " + val);
				if (body.indexOf(val) != -1) {
					return true;
				}
				//addRetErrStr("В ответе сервера найдена строка ошибки:" + val);
			}
		}
		return false;
	}

	
	protected void addRetErrStr0(String str) {
		//logger.debug("--- err ---\n"+str);
		super.addRetErrStr(str); 
	}
	
	
	protected void addRetOutStr0(String str) {
		//logger.debug("---out ---\n"+str);
		super.addRetOutStr(str); 
	}
	

	public void read_publisher() {
		URL url = null; 
		String s_url = null;
		try {
			try {
				s_url = "http://"+obiee_host+":"+obiee_port+"/xmlpserver/services/v2/ReportService?wsdl"; 
				url = new URL(s_url);
			} catch (MalformedURLException ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Ошибка при получении wsdl <"+s_url+">.\n"+ex.getMessage());
				setStatusError();
				return;
			}
			 ReportService_Service reportServiceService = new ReportService_Service(url);
			 ReportService reportService = reportServiceService.getReportService();
			 // Add your code to call the desired methods.
			 String username = obiee_user;
			 String password = obiee_auth;
			 String reportAbsolutePath = null;
			try {
				reportAbsolutePath = URLDecoder.decode(report_full_path,"UTF-8");
			} catch (UnsupportedEncodingException ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Ошибка при преобразовании пути <"+report_full_path+">.\n"
						+ex.getMessage());
				setStatusError();
				return;
			}
	
			 //System.out.println("Testing runReport Service");
			 ReportRequest repRequest = new ReportRequest();
			 //Set general Report Parameters
			 repRequest.setReportAbsolutePath(reportAbsolutePath);
			 repRequest.setAttributeTemplate("Chart and Table Layout");
			 repRequest.setAttributeFormat("pdf");
			 repRequest.setAttributeLocale("en-US");
			 repRequest.setSizeOfDataChunkDownload(-1);
	
			 //Set User Parameter P_DEPT
			 /*
			 ArrayOfParamNameValue arrayOfParamNameValue = new
			 ArrayOfParamNameValue();
			 ParamNameValues paramNameValues = new ParamNameValues();
			 ParamNameValue paramNameValue = new ParamNameValue();
			 ArrayOfString arrayOfString = new ArrayOfString();
			 paramNameValue.setName("P_DEPT");
			 arrayOfString.getItem().add("RESEARCH");
			 paramNameValue.setValues(arrayOfString);
			 arrayOfParamNameValue.getItem().add(paramNameValue);
			 paramNameValues.setListOfParamNameValues
			(arrayOfParamNameValue);
			 repRequest.setParameterNameValues(paramNameValues);
			*/
			 ReportResponse repResponse = new ReportResponse();
			 try {
				repResponse = reportService.runReport(repRequest, username, password);
			} catch(SecurityException ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Не удалось получить доступ.\n"+ex.getMessage());
				setStatusError();
				return;
			} catch(AccessDeniedException_Exception ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Не удалось получить доступ.\n"+ex.getMessage());
				setStatusError();
				return;
			} catch(InvalidParametersException_Exception ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Ошибки в параметрах.\n"+ex.getMessage());
				setStatusError();
				return;
			} catch(OperationFailedException_Exception ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта.\n"+ex.getMessage());
				setStatusError();
				return;
			}
			 String contentType = repResponse.getReportContentType();
			 //System.out.println(contentType);
			 byte[] baReport = repResponse.getReportBytes();
			 String body = new String(baReport);
			 //System.out.println(body);
			 if(body==null||body.length()==0) {
					addRetErrStr0("Не удалось выполнить проверку отчёта.\nВернулся пустой отчет.");
					setStatusError();
					return;
			 }
			setStatusSuccess();
		} catch(Exception ex) {
			addRetErrStr0("Не удалось выполнить проверку отчёта.\n"+ex.getMessage());
			setStatusError();
			return;
		}
	}
	
	
	public void read_bi_server() {
		//logger.debug("-- read_bi_server() --");
		debug(getDebugInfo()+"-- read_bi_server() --");
		try {
			ObieeManagerFactory factory;
			ObieeManager manager;
	
	    	ObieeConfiguration config = new ObieeConfiguration();
			//logger.debug("-- read_bi_server()  1 --");
			debug(getDebugInfo()+"-- read_bi_server()  1 --");
	    	config.setUsername(obiee_user);
	    	config.setPassword(obiee_auth);
	    	config.setEndpointBaseUrl("http://"+obiee_host+":" + obiee_port);
	    	config.setReadTimeout((int) TimeUnit.SECONDS.toMillis(600));
	    	config.setConnectTimeout((int) TimeUnit.SECONDS.toMillis(60));
			
	    	String  report_path = null;
	    	try {
	    		report_path = URLDecoder.decode(report_full_path,"UTF-8");
				//logger.debug("-- read_bi_server()  2 --");
				debug(getDebugInfo()+"-- read_bi_server()  2 --");
			} catch (UnsupportedEncodingException ex) {
				addRetErrStr0("Не удалось выполнить проверку отчёта. Ошибка при преобразовании пути <"+report_full_path+">.\n"+ex.getMessage());
				setStatusError();
				return;
			}
			
			try {
				//logger.debug("-- read_bi_server()  3 --");
				debug(getDebugInfo()+"-- read_bi_server()  3 --");
				factory = new ObieeManagerConfigurer(config).getAMFactory();
				//logger.debug("-- read_bi_server()  4 --");
				debug(getDebugInfo()+"-- read_bi_server()  4 --");
			} catch (Exception e) {
		    	String str = "Не удалось создать конфигуратор OBIEE. "+e.getMessage();
				addRetErrStr0(str);
				setStatusError();
				return;
			}
	
			//logger.debug("-- read_bi_server()  5 --");
			debug(getDebugInfo()+"-- read_bi_server()  5 --");
			manager = factory.createAnalyticsManager();
			//logger.debug("-- read_bi_server()  6 --");
			debug(getDebugInfo()+"-- read_bi_server()  6 --");
			try {
				//logger.debug("-- read_bi_server()  7 --");
				debug(getDebugInfo()+"-- read_bi_server()  7 --");
				String body = manager.validateByXmlViewService(report_path, this);
				//logger.debug("-- read_bi_server()  8 --");
				debug(getDebugInfo()+"-- read_bi_server()  8 --");
				if(body!=null&&body.length()!=0) {
					 addRetOutStr0(body);
				 }
				 if(body==null||body.length()==0||body.trim().equals("<rowset xmlns=\"urn:schemas-microsoft-com:xml-analysis:rowset\"></rowset>")) {
						addRetErrStr0("Не удалось выполнить проверку отчёта.\nВернулся пустой отчет.");
						setStatusError();
						return;
				 }
		        }
		    catch( java.net.SocketTimeoutException ex) {
		        	String str = "Не удалось получить отчет. Необходимо увеличить время чтения отчета. Сейчас read timeout:"
		        			+ config.getReadTimeout() + " connect timeout: " + config.getConnectTimeout()
		        			+ " " +ex.getMessage();
		        	//logger.error("-- read_bi_server()  9-1 -- exception: "+str);
					addRetErrStr0(str);
					setStatusError();
		        	manager.close();
					return;
			} catch (Exception e) {
					if(e.getMessage().indexOf("java.net.SocketTimeoutException")!=-1) {
			        	String str = "Не удалось получить отчет. Необходимо увеличить время чтения отчета. Сейчас read timeout:"
			        			+ config.getReadTimeout() + " connect timeout: " + config.getConnectTimeout()
			        			+ " " +e.getMessage();
			        	//logger.error("-- read_bi_server()  9-2 -- exception: "+str);
						addRetErrStr0(str);
						setStatusError();
			        	manager.close();
						return;
					}
		        	String str = "Не удалось получить отчет. "+e.getMessage();
		        	//logger.error("-- read_bi_server()  9-3 -- exception: "+str);
					addRetErrStr0(str);
					setStatusError();
		        	manager.close();
					return;
		    }
			//manager.validateByHtmlService(report_path); 
			//logger.debug("-- read_bi_server()  9 --");
			debug(getDebugInfo()+"-- read_bi_server()  9 --");
			manager.close();
			//logger.debug("-- read_bi_server()  10 --");
			debug(getDebugInfo()+"-- read_bi_server()  10 --");
			setStatusSuccess();
		} catch(Exception ex) {
			addRetErrStr0("Не удалось выполнить проверку отчёта.\n"+ex.getMessage());
			setStatusError();
			return;
		}
		
	}


	public String read(String server, String s1) throws Exception {
		//logger.debug(getDebugInfo()+"-- read() 1");
		this.debug(getDebugInfo()+"-- read() 1");
		
		//!!! Принудительно выставляем для jvm т.к. не всегда срабатывает
		System.setProperty("sun.net.client.defaultConnectTimeout", "60000");
		System.setProperty("sun.net.client.defaultReadTimeout", "60000");
		
		URL u = null;
		try {
			u = new URL(server);
		} catch(Exception ex) {
			this.error(getDebugInfo()+ ex.getMessage());
			throw new Exception(ex.getMessage()); 
		}
		URLConnection uc = null;
		//logger.debug(getDebugInfo()+"-- read() 2");
		this.debug(getDebugInfo()+"-- read() 2");
		try {
			
			uc = u.openConnection();
			uc.setConnectTimeout(1000000); //duration*1000);
			uc.setReadTimeout(1000000); //duration*1000);
			
		} catch(Exception ex) {
			this.error(getDebugInfo()+ ex.getMessage());
			throw new Exception(ex.getMessage()); 
		}
		
		HttpURLConnection connection = (HttpURLConnection) uc;
		
		//logger.debug(getDebugInfo()+"-- read() 3");
		this.debug(getDebugInfo()+"-- read() 3");

		connection.setDoOutput(true);
		connection.setDoInput(true);
		try {
			connection.setRequestMethod("POST");
		} catch(Exception ex) {
			this.error(getDebugInfo()+ ex.getMessage());
			throw new Exception(ex.getMessage()); 
		}
		//logger.debug(getDebugInfo()+"-- read() 4");
		this.debug(getDebugInfo()+"-- read() 4");

//		connection.setConnectTimeout(1000000); //duration*1000);
//		connection.setReadTimeout(1000000); //duration*1000);

		Writer wout = null;
		try {
			OutputStream out = connection.getOutputStream();
			wout = new OutputStreamWriter(out,"UTF-8");
			
			//logger.debug(getDebugInfo()+"-- read() 5");
			this.debug(getDebugInfo()+"-- read() 5");

			String[] tok = Strings.tokenize(s1, "\n");
		    for (int i = 0; i < tok.length; i++) {
		    	wout.write(tok[i]+"\n");
		      }
		} catch(Exception ex) {
			this.error(getDebugInfo()+ ex.getMessage());
			throw new Exception(ex.getMessage()); 
		} finally {
			if(wout!=null) {
				wout.flush();
				wout.close();
			}
		}
		//logger.debug(getDebugInfo()+"-- read() 6");
		this.debug(getDebugInfo()+"-- read() 6");
		
		StringBuffer response = null;
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String inputLine;
			response = new StringBuffer();
	
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
		} catch(Exception ex) {
			this.error(getDebugInfo()+ ex.getMessage());
			throw new Exception(ex.getMessage()); 
		}
		//logger.debug(getDebugInfo()+"-- read() 7");
		this.debug(getDebugInfo()+"-- read() 7");

		String resp = new String(response);
		return resp;
		
		//-- находим номер сессии
		//<sawsoap:sessionID xsi:type="xsd:string"></sawsoap:sessionID>
		//int i1 = response.indexOf(str)
		//"Не удалось подключиться к серверу."
} // end main
	


protected void read_bi_server_http() {
	//logger.debug(getDebugInfo()+"-- read_bi_server_http()");
	this.debug(getDebugInfo()+"-- read_bi_server_http()");
	
	String server1 = "http://"+obiee_host+":"+obiee_port+"/analytics/saw.dll?SoapImpl=nQSessionService";
	String server2 = "http://"+obiee_host+":"+obiee_port+"/analytics/saw.dll?SoapImpl=xmlViewService";

	String s1=Constants.BI_SERVER_SESSION_ID_REQUEST;
	
	s1 = Strings.replace(s1, "%WS_LOGIN%", obiee_user);
	s1 = Strings.replace(s1, "%WS_PASSWORD%", obiee_auth);
	
	String sId = null;
	try {
		String resp = read(server1,s1);
		sId = Strings.getStrBetween(resp,"<sawsoap:sessionID xsi:type=\"xsd:string\">","</sawsoap:sessionID>");
		//logger.debug(getDebugInfo()+"-- sId: ["+sId+"]");
		this.debug(getDebugInfo()+"-- sId: ["+sId+"]");
		if(sId==null) {
			addRetErrStr0("Не удалось получить номер сессии. Проверьте пользователя и пароль.");
			setStatusError();
			return;
		}
		
	} catch(Exception ex) {
		addRetErrStr0("Не удалось получить номер сессии.\n"
				+ex.getMessage());
		setStatusError();
		return;
	}
	
	String s2=Constants.READ_XML_REPORT_BI_SERVER;
	
	try {
		s2 = Strings.replace(s2, "%WS_SESSIONID%", sId);
		String reportAbsolutePath = URLDecoder.decode(report_full_path,"UTF-8");
		s2 = Strings.replace(s2, "%WS_REPORT_PATH%", reportAbsolutePath);
		//logger.debug(getDebugInfo()+"-- reportAbsolutePath: ["+reportAbsolutePath+"]");
		this.debug(getDebugInfo()+"-- reportAbsolutePath: ["+reportAbsolutePath+"]");
		String resp = read(server2,s2);
		String s = "-- ответ сервера:"+resp.substring(0, resp.length() < Constants.BODY_MAX_LENGTH_IN_HTML_READ ? resp.length() : Constants.BODY_MAX_LENGTH_IN_HTML_READ );
		//logger.debug(getDebugInfo()+s);		
		this.debug(getDebugInfo()+s);		
		//System.out.println(resp.toString());
		if(resp.indexOf("<sawsoap:rowset xsi:type=\"xsd:string\">&lt;rowset xmlns=&quot;urn:schemas-microsoft-com:xml-analysis:rowset&quot;&gt;&lt;/rowset&gt;</sawsoap:rowset>")
				!=-1) {
			addRetErrStr0("Отчет не содержит данных.");
			setStatusError();
			return;
		}
		if(resp.indexOf("<sawsoape:Message>Authentication error. Invalid session ID or Session Expired</sawsoape:Message>")
				!=-1) {
			addRetErrStr0("Ошибка авторизации или сессия закрыта.");
			setStatusError();
			return;
		}
		if(resp.indexOf("<sawsoape:Message>Path not found")!=-1||resp.indexOf("<sawsoape:Message>Путь не найден")!=-1 ) {
			addRetErrStr0("Не найден путь к отчёту. <"+reportAbsolutePath+">");
			setStatusError();
			return;
		}
		if(resp.indexOf("<soap:Fault>")!=-1) {
			String s3 = Strings.getStrBetween(resp, "<soap:Fault>", "</soap:Fault>");
			addRetErrStr0("Веб сервис вернул ошибку: "+s3);
			setStatusError();
			return;
		}
		
		addRetOutStr(resp.substring(0, resp.length() < Constants.BODY_MAX_LENGTH_IN_HTML_READ ? resp.length() : Constants.BODY_MAX_LENGTH_IN_HTML_READ ));
		setStatusSuccess();
	} catch(Exception ex) {
		addRetErrStr0("Не удалось получить отчет.\n"
				+ex.getMessage());
		setStatusError();
		return;
	}
	}
	
/*
protected int read_bi_server_http(String _url) throws Exception {
		body = "";
		int ret_code = -1; // -- -1 значит нельзя установить код возврата
		
		URL url_ = null;
		try {
			url_ = new URL(_url);
		} catch (Exception ex) {
			String str = "Невозможно преобразовать строку URL в URL-адрес.\n" + ex.getMessage()
					+ "Инциндент в процедуре: cb.dfs.trail.TrailObiee.run()";
			throw new Exception(str);
		}

		URLConnection httpConn;
		try {
			httpConn = url_.openConnection();
		} catch (Exception ex) {
			String str = "Ошибка при открытии доступа к URL-адресу <" + _url + ">.\n" + ex.getMessage()
					+ "Инциндент в процедуре: cb.dfs.trail.TrailObiee.run()";
			throw new Exception(str);
		}

		httpConn.setReadTimeout(duration*1000);

		try {
			httpConn.connect();
		} catch (Exception ex) {
			String str = "Ошибка при открытии доступа к URL-адресу <" + _url + ">.\n" + ex.getMessage()
					+ "Инциндент в процедуре: cb.dfs.trail.TrailObiee.run()";
			throw new Exception(str);
		}


		try {
			if (httpConn instanceof HttpURLConnection) {
				HttpURLConnection httpConnection = (HttpURLConnection) httpConn;
				ret_code = httpConnection.getResponseCode();
				//addRetOutStr("При обращении к " + url + " вернулся код: " + ret_code);
			} else {
				//addRetOutStr("При обращении к " + url + " нельзя получить код возврата.");
			}
		} catch (Exception ex) {
			String str = "Ошибка при открытии доступа к URL-адресу <" + url + ">.\n" + ex.getMessage()
					+ "Инциндент в процедуре: cb.dfs.trail.TrailObiee.run()";
			throw new Exception(str);
		}
		try {
			BufferedReader reader = new BufferedReader(
					new InputStreamReader(httpConn.getInputStream(), "UTF-8"));
			while (true) {
				String line = reader.readLine();
				if (line == null)
					break;
				body += line + "\n";
			}
			System.out.println(body);
			addRetOutStr(body.substring(0, body.length() < Constants.BODY_MAX_LENGTH_IN_HTML_READ ? body.length() : Constants.BODY_MAX_LENGTH_IN_HTML_READ ));
			setStatusSuccess();
		} catch (Exception ex) {
			String str = "Ошибка при чтении содержимого страницы <" + _url + ">.\n" + ex.getMessage()
					+ "Инциндент в процедуре: cb.dfs.trail.TrailObiee.run()";
			//System.err.println("body :"+body);
			throw new Exception(str);
		}
		return ret_code;
	}
	*/

	@Override
	public void run() {
		try {
			if(bi_server_or_publisher.toUpperCase().trim().equals("BI_SERVER")) {
				//read_bi_server();
				read_bi_server_http();
			} else if(bi_server_or_publisher.toUpperCase().trim().equals("PUBLISHER"))
				read_publisher();
			else {
				addRetErrStr0("Неверный тип OBIEE проверки <"+bi_server_or_publisher+">. Должно быть BI_SERVER или PUBLISHER");
				setStatusError();
				return;
			}
		} catch (Throwable ex) {
			addRetErrStr0("Необработанное исключение в TrailObiee.run(): "+ ex.getMessage());
			setStatusError();
			return;
		}
	}
	
	
	public static void main(String[] args) {
		TrailObiee trail = null;
		try {
			TrailManagerSubro trailSubroManager = null;
			trailSubroManager = new TrailManagerSubro(Constants.test_url, Constants.test_user, Constants.test_pwd);
			
//			TrailObiee trail = new TrailObiee("RDAgent", " BI Server test ", "Авто тест "
//					, "BI_SERVER"
//					, "172.28.64.2", "9704", "weblogic", "welcome1"
//					, "%2Fshared%2FTEST_STEPANOV%2FEREMEEV_TEST", null
//					, "50", "10","0");
			
//			TrailObiee trail = new TrailObiee("RDAgent", " BI Publisher test ", "Авто тест "
//					, "PUBLISHER"
//					, "vm-ocdm-demo.srv.rdtex.ru", "9704", "ocdm", "ocdm1234"
//					, "/~ocdm/Drafts/test.xdo", null
//					, "50", "10","0");
			
			//http://172.24.1.86:9704/analytics/saw.dll?Answers&path=%2Fshared%2F%D0%9E%D0%A1%D0%9C%2FERemeev_test#resultsTab158b5e45ee0

//			trail = new TrailObiee("RDAgent", " BI Publisher test ", "Авто тест "
//					, "BI_SERVER"
//					, "172.24.1.86", "9704", "weblogic", "welcome1"
//					, "%2Fshared%2F%D0%9E%D0%A1%D0%9C%2FERemeev_test", null
//					, "150", "10","0");
		
//			TrailObiee trail = new TrailObiee("RDAgent", " BI Publisher test ", "Авто тест "
//					, "BI_SERVER"
//					, "172.24.1.86", "9704", "weblogic", "welcome1"
//					, "%2Fshared%2F%D0%9E%D0%A1%D0%9C%2FERemeev_test", null
//					, "50", "10","0");
		
//			 http://172.24.1.86:9704/analytics/saw.dll?PortalGo&Action=prompt&path=%2Fshared%2F%D0%94%D0%B5%D0%BC%D0%BE-%D0%BE%D1%82%D1%87%D0%B5%D1%82%D1%8B%2F%D0%9A%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D0%B8%D0%B8%20%D0%BF%D0%BB%D0%B0%D0%BD%D0%BE%D0%B2%D1%8B%D0%B5
				trail = new TrailObiee("RDAgent", " BI SERVER Com Plan", "Авто тест "
						, "BI_SERVER"
						, "172.24.1.86", "9704", "weblogic", "welcome1"
						, "%2Fshared%2F%D0%94%D0%B5%D0%BC%D0%BE-%D0%BE%D1%82%D1%87%D0%B5%D1%82%D1%8B%2F%D0%9A%D0%BE%D0%BC%D0%B8%D1%81%D1%81%D0%B8%D0%B8%20%D0%BF%D0%BB%D0%B0%D0%BD%D0%BE%D0%B2%D1%8B%D0%B5", null
						, "150", "10","0");
				
			trail.overwrite(trailSubroManager.getConnection());
			trailSubroManager.getConnection().commit();
			trailSubroManager.launch_trail_if_ready((TrailBase) trail, "scenario_name", (int) (Math.random() * 1000.));
			
			System.out.println(trail.to_string());
		} catch (Exception ex) {
			System.out.println(trail.to_string());
			System.err.println(ex.getMessage());
		}
	} 
	
}
