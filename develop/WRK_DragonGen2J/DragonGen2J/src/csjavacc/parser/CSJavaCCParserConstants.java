/* Generated By:JavaCC: Do not edit this line. CSJavaCCParserConstants.java */
/**
 * This file contains the code for CSJavaCCParser generated
 * by CSJavaCCParser itself.
 */

package csjavacc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CSJavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _OPTIONS = 1;
  /** RegularExpression Id. */
  int _LOOKAHEAD = 2;
  /** RegularExpression Id. */
  int _IGNORE_CASE = 3;
  /** RegularExpression Id. */
  int _PARSER_BEGIN = 4;
  /** RegularExpression Id. */
  int _PARSER_END = 5;
  /** RegularExpression Id. */
  int _CSCODE = 6;
  /** RegularExpression Id. */
  int _TOKEN = 7;
  /** RegularExpression Id. */
  int _SPECIAL_TOKEN = 8;
  /** RegularExpression Id. */
  int _MORE = 9;
  /** RegularExpression Id. */
  int _SKIP = 10;
  /** RegularExpression Id. */
  int _TOKEN_MGR_DECLS = 11;
  /** RegularExpression Id. */
  int _EOF = 12;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 23;
  /** RegularExpression Id. */
  int PRAGMA = 24;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 25;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 26;
  /** RegularExpression Id. */
  int ABSTRACT = 28;
  /** RegularExpression Id. */
  int BOOLEAN = 29;
  /** RegularExpression Id. */
  int BREAK = 30;
  /** RegularExpression Id. */
  int BYTE = 31;
  /** RegularExpression Id. */
  int CASE = 32;
  /** RegularExpression Id. */
  int CATCH = 33;
  /** RegularExpression Id. */
  int CHAR = 34;
  /** RegularExpression Id. */
  int CLASS = 35;
  /** RegularExpression Id. */
  int CONST = 36;
  /** RegularExpression Id. */
  int CONTINUE = 37;
  /** RegularExpression Id. */
  int _DEFAULT = 38;
  /** RegularExpression Id. */
  int DO = 39;
  /** RegularExpression Id. */
  int DOUBLE = 40;
  /** RegularExpression Id. */
  int ELSE = 41;
  /** RegularExpression Id. */
  int ENUM = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int OVERRIDE = 44;
  /** RegularExpression Id. */
  int FLOAT = 45;
  /** RegularExpression Id. */
  int FOR = 46;
  /** RegularExpression Id. */
  int GOTO = 47;
  /** RegularExpression Id. */
  int IF = 48;
  /** RegularExpression Id. */
  int IMPORT = 49;
  /** RegularExpression Id. */
  int INT = 50;
  /** RegularExpression Id. */
  int INTERFACE = 51;
  /** RegularExpression Id. */
  int LONG = 52;
  /** RegularExpression Id. */
  int NEW = 53;
  /** RegularExpression Id. */
  int NULL = 54;
  /** RegularExpression Id. */
  int NAMESPACE = 55;
  /** RegularExpression Id. */
  int PRIVATE = 56;
  /** RegularExpression Id. */
  int PROTECTED = 57;
  /** RegularExpression Id. */
  int PUBLIC = 58;
  /** RegularExpression Id. */
  int RETURN = 59;
  /** RegularExpression Id. */
  int SHORT = 60;
  /** RegularExpression Id. */
  int STATIC = 61;
  /** RegularExpression Id. */
  int BASE = 62;
  /** RegularExpression Id. */
  int SWITCH = 63;
  /** RegularExpression Id. */
  int THIS = 64;
  /** RegularExpression Id. */
  int THROW = 65;
  /** RegularExpression Id. */
  int TRUE = 66;
  /** RegularExpression Id. */
  int TRY = 67;
  /** RegularExpression Id. */
  int VOID = 68;
  /** RegularExpression Id. */
  int WHILE = 69;
  /** RegularExpression Id. */
  int FOREACH = 70;
  /** RegularExpression Id. */
  int PARTIAL = 71;
  /** RegularExpression Id. */
  int YIELD = 72;
  /** RegularExpression Id. */
  int INTERNAL = 73;
  /** RegularExpression Id. */
  int DELEGATE = 74;
  /** RegularExpression Id. */
  int READONLY = 75;
  /** RegularExpression Id. */
  int FIXED = 76;
  /** RegularExpression Id. */
  int UNSAFE = 77;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 78;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 79;
  /** RegularExpression Id. */
  int HEX_LITERAL = 80;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 81;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 82;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 84;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 85;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 86;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 87;
  /** RegularExpression Id. */
  int STRING_LITERAL = 88;
  /** RegularExpression Id. */
  int LPAREN = 89;
  /** RegularExpression Id. */
  int RPAREN = 90;
  /** RegularExpression Id. */
  int LBRACE = 91;
  /** RegularExpression Id. */
  int RBRACE = 92;
  /** RegularExpression Id. */
  int LBRACKET = 93;
  /** RegularExpression Id. */
  int RBRACKET = 94;
  /** RegularExpression Id. */
  int SEMICOLON = 95;
  /** RegularExpression Id. */
  int COMMA = 96;
  /** RegularExpression Id. */
  int DOT = 97;
  /** RegularExpression Id. */
  int ASSIGN = 98;
  /** RegularExpression Id. */
  int LT = 99;
  /** RegularExpression Id. */
  int BANG = 100;
  /** RegularExpression Id. */
  int TILDE = 101;
  /** RegularExpression Id. */
  int HOOK = 102;
  /** RegularExpression Id. */
  int COLON = 103;
  /** RegularExpression Id. */
  int EQ = 104;
  /** RegularExpression Id. */
  int LE = 105;
  /** RegularExpression Id. */
  int GE = 106;
  /** RegularExpression Id. */
  int NE = 107;
  /** RegularExpression Id. */
  int SC_OR = 108;
  /** RegularExpression Id. */
  int SC_AND = 109;
  /** RegularExpression Id. */
  int INCR = 110;
  /** RegularExpression Id. */
  int DECR = 111;
  /** RegularExpression Id. */
  int PLUS = 112;
  /** RegularExpression Id. */
  int MINUS = 113;
  /** RegularExpression Id. */
  int STAR = 114;
  /** RegularExpression Id. */
  int SLASH = 115;
  /** RegularExpression Id. */
  int BIT_AND = 116;
  /** RegularExpression Id. */
  int BIT_OR = 117;
  /** RegularExpression Id. */
  int XOR = 118;
  /** RegularExpression Id. */
  int REM = 119;
  /** RegularExpression Id. */
  int PLUSASSIGN = 120;
  /** RegularExpression Id. */
  int MINUSASSIGN = 121;
  /** RegularExpression Id. */
  int STARASSIGN = 122;
  /** RegularExpression Id. */
  int SLASHASSIGN = 123;
  /** RegularExpression Id. */
  int ANDASSIGN = 124;
  /** RegularExpression Id. */
  int ORASSIGN = 125;
  /** RegularExpression Id. */
  int XORASSIGN = 126;
  /** RegularExpression Id. */
  int REMASSIGN = 127;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 128;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 129;
  /** RegularExpression Id. */
  int GT = 130;
  /** RegularExpression Id. */
  int LANGLE = 99;
  /** RegularExpression Id. */
  int RANGLE = 130;
  /** RegularExpression Id. */
  int IDENTIFIER = 142;
  /** RegularExpression Id. */
  int LETTER = 143;
  /** RegularExpression Id. */
  int PART_LETTER = 144;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AFTER_EGEN = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_PRAGMA = 3;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 4;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 5;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"options\"",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"CSCODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 18>",
    "\"//\"",
    "<token of kind 20>",
    "\"/*\"",
    "<token of kind 22>",
    "<SINGLE_LINE_COMMENT>",
    "<PRAGMA>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 27>",
    "\"abstract\"",
    "\"bool\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"false\"",
    "\"override\"",
    "\"single\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"using\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"new\"",
    "\"null\"",
    "\"namespace\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"base\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"while\"",
    "\"foreach\"",
    "\"partial\"",
    "\"yield\"",
    "\"internal\"",
    "\"delegate\"",
    "\"readonly\"",
    "\"fixed\"",
    "\"unsafe\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"#\"",
    "\"get\"",
    "\"set\"",
    "\"...\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"is\"",
    "\"<<\"",
    "\"in\"",
    "\"finally\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
