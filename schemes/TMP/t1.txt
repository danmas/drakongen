
D:\YandexDisk\YandexDisk\WORKS\drakongen\schemes>REM Generation  src classes from  scheme. 

D:\YandexDisk\YandexDisk\WORKS\drakongen\schemes>chcp 1251 
’ҐЄгй п Є®¤®ў п бва ­Ёж : 1251

D:\YandexDisk\YandexDisk\WORKS\drakongen\schemes>REM chcp 65001 

D:\YandexDisk\YandexDisk\WORKS\drakongen\schemes>set DRAKON_GEN="..\exe\drakongen_NEW.jar" 

D:\YandexDisk\YandexDisk\WORKS\drakongen\schemes>java -jar "..\exe\drakongen_NEW.jar" ..\develop\WRK_DragonGen2J\DragonGen2J\ DrakonGen2.graphml 
Базовый каталог:..\develop\WRK_DragonGen2J\DragonGen2J\ Файл со схемой:DrakonGen2.graphml
 <--- Was read:DrakonGen2.graphml
node code:null com:
             type:SH_END
node code:			build_vis(graph_data);
 com:строим код type:ACTION
node code:public function buildVis():void { com:setCurReleaseFromNode() type:SH_BEG
node code:break; com:break type:BREAK
node code:DrakonUtils.DI_SI_BEG com:DI_SI_BEG type:CASE
node code:code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:
             type:CODE_JAVA
node code:code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:получаем параметры текущего узла type:ACTION
node code:if(comment != null)
	res_str +=  commentPrefix + comment + "\n";
if(code != null) 
	res_str +=  code + " \n";
 com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces +commentPrefix+  comment + "\n";
if (code != null)
	res_str += spaces +code + "\n";
 com:добавляем коментарий и код в результат type:ACTION
node code:cur_node = com:
             type:CODE_JAVA
node code:cur_node = com:тек.узел type:ACTION
node code:null com:
             type:SH_END
node code:			build_vis(graph_data);
 com:строим код type:ACTION
node code:public function buildVis():void { com:getCurRelease() type:SH_BEG
node code:DrakonUtils.message("--->Текущая реальность из Начало: " + CURRENT_RELEASE); com:--- type:OUTPUT
node code:null com:Реверскодинг type:null
node code:null com:Реверскодинг type:null
node code:CODE_JAVA com:Сборка класса DrakonGen2 type:DG_BEG
node code:null com:добавляем к коду маркер type:null
node code:null com:Сборка класса DrakonUtils type:DG_BEG
node code:null com:Сборка класса ReverseCoding type:DG_BEG
node code:null com:Сборка класса DrakonAct type:DG_BEG
node code:  com:Сборка класса ReverseCoding type:SI_BEG
node code:null com:Начать акт type:START_ACTS
node code:public ReverseCoding() { com:Конструктор type:PROC_BEG
node code:}

 com:
             type:CODE_JAVA
node code:} //-- конец класса
 com:
             type:SI_END
node code:CURRENT_RELEASE = (String) DrakonUtils.getCode(v);
setCurRelease(CURRENT_RELEASE); com:
             type:CODE_JAVA
node code:src\ru\erv\drakongen\ReverseCoding.java com:ReverseCoding.java type:WR_RES_FILE
node code:public void setCurReleaseFromNode(Vertex v) { com:
             type:CODE_JAVA
node code:package ru.erv.drakongen;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Iterator;
import ru.erv.drakongen.utils.FileUtils;
 com:package
imports type:ACTION
node code:public class ReverseCoding { com:сlass ReverseCoding type:ACTION
node code:cur_node = DrakonUtils.getOutNode(cur_node,0);  com:
             type:CODE_JAVA
node code:null com:
             type:SH_END
node code:			build_vis(graph_data);
 com:строим код type:ACTION
node code:null com:setCurRelease() type:SH_BEG
node code:dg = new DrakonGen2();
 com:создаем новый DrakonGen type:ACTION
node code:dg.parseSiluet(node);

 com:производим разбор силуэта type:ACTION
node code:dg.setCurRelease(CURRENT_RELEASE);	
 com:устанавливаем текущую реальность type:ACTION
node code:dg = new DrakonGen2();
 com:создаем новый DrakonGen type:ACTION
node code:dg.setCurRelease(CURRENT_RELEASE);	
 com:устанавливаем текущую реальность type:ACTION
node code:}

 com:
             type:CODE_JAVA
node code:return CURRENT_RELEASE; com:
             type:CODE_JAVA
node code:public String getCurRelease() { com:
             type:CODE_JAVA
node code:break; com:
             type:CODE_JAVA
node code:DrakonUtils.message("--->Текущая реальность: " + CURRENT_RELEASE); com:--- type:OUTPUT
node code:break; com:break type:BREAK
node code:null com:
             type:EI
node code:code != null com:
             type:CODE_JAVA
node code:code == null com:код есть? type:IF
node code:code = DrakonUtils.getCode(node); com:
             type:CODE_JAVA
node code:code = DrakonUtils.getCode(node); com:получаем код из вход. узла type:ACTION
node code:null com:неизвестный тип type:DEFAULT
node code:str = "Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ \"" + comment + "\" ("+ di_type + ")!n"; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ ... type:OUTPUT
node code:if(comment != null)	
	comment = comment.replace("\n","-- ");
if(comment != null) 
	res_str += "\n-- " + comment + "\n";
if(code != null)	
	res_str += code + "\n"; com:
             type:CODE_PLSQL
node code:str = "Ошибка! У Развилки \"" + comment + "\" должен быть Да конец!";
 com:формируем сообщение о ошибке type:ACTION
node code:null com:Сборка класса ReverseCoding type:DG_BEG
node code:DI_DEFAULT com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:return term_yes; com:
             type:CODE_JAVA
node code:CURRENT_RELEASE = cur_rel; com:
             type:CODE_JAVA
node code:= parceNext(cur_node, _level + 1); com:
             type:CODE_JAVA
node code:public  void setCurRelease(String cur_rel) { com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:return null; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:str = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +" (тип " + di_type+")";
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы  type:OUTPUT
node code:var str:String = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +"  тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:return; com:null type:RETURN
node code:isCheckOutputs(cur_node) com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:добавляем "}" type:ACTION
node code:isCheckOutputs(cur_node)
 com:Проверка выходов проходит? type:IF
node code:if (comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:
             type:CODE_JAVA
node code:break; com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:добавляем комент и код в результат type:ACTION
node code:break; com:
             type:CODE_JAVA
node code:DrakonUtils.message("--->префикс коментария: " + commentPrefix); com:
             type:CODE_JAVA
node code:null com:тип НАЧАЛО ПРОЦЕДУРЫ? type:IF
node code:str = "НАРУШЕНИЕ ПРАВИЛА Действия! У иконы \"" + comment + "\"  неверный тип выхода ("+ DrakonUtils.getIconType(out_1)+").\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА Действия! У иконы ... неверный тип выхода. type:OUTPUT
node code:DrakonUtils.message("--12--  "+DrakonUtils.getIconType(out_1) + "икона:" + DrakonUtils.getComment(out_1) + "\n"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("----> Записываем файл " + code + "\n"); com:-12- type:OUTPUT
node code:DrakonUtils.debug("-pnx- -2- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:null com:-pnx- n -2-:  type:OUTPUT
node code:DrakonUtils.message("--1--  "+DrakonUtils.getIconType(out_1) + "икона:" + DrakonUtils.getComment(out_1) + "\n"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("----> Записываем файл " + code + "\n"); com:-1- type:OUTPUT
node code:DrakonUtils.getIconType(in_node).equals(CURRENT_RELEASE) com:
             type:CODE_JAVA
node code:out_1 = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:code = DrakonUtils.getCode(in_node); com:
             type:CODE_JAVA
node code:null com:получам первый выход type:ACTION
node code:code = DrakonUtils.getCode(node); com:
             type:CODE_JAVA
node code:return code; com:
             type:CODE_JAVA
node code:return code;
}


 com:
             type:CODE_JAVA
node code:protected Vertex parceNext(Vertex cur_node, int _level) {
/**
 * @param	cur_node
 * @param	res_str
 * @return terminator - последний узел на котором закончилось движение
 */ com:
             type:CODE_JAVA
node code:String comment = DrakonUtils.getComment(cur_node);
String di_type = DrakonUtils.getIconType(cur_node);
String code = geReleaseCode(cur_node);
String spaces = "";
Vertex term_yes;
String str;
Vertex node;
Vertex cur_node_d;  com:
             type:CODE_JAVA
node code:str = "\nОШИБКА! Следующий за узлом \"" + comment + "\" узел отсутствует."; com:
             type:CODE_JAVA
node code:cur_node == null com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DI_EI com:
             type:CODE_JAVA
node code:DI_EI com:КОНЕЦ УСЛОВИЯ(EI) type:CASE
node code:DI_ACTION com:
             type:CODE_JAVA
node code:DI_AC com:ДЕСТВИЕ(ACTION) type:CASE
node code:DI_AC com:
             type:CODE_JAVA
node code:DI_AC com:ДЕСТВИЕ(AC) type:CASE
node code:di_type com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:null com:тип узла type:SWITCH
node code:for (int i = 0; i < _level; i++)  
	spaces += "\t";
 com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
 com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(out_1).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_1).equals(DI_SH_BEG) com:
             type:CODE_JAVA
node code:res_str += spaces +commentPrefix+" ПРЕДУПРЕЖДЕНИЕ! не установлен тип узла \"" + comment + "\" \n"; com:
             type:CODE_JAVA
node code:if(comment != null) 
	res_str += "\n"+commentPrefix + comment + "\n";
if(code != null)	
	res_str += code + "\n"; com:
             type:CODE_JAVA
node code: = parceNext(cur_node.DrakonUtils.getOutNode(0), _level); com:Разбираем ветку type:INSERT
node code:var node:NodeSprite com:node type:ACTION
node code:di_type == null || di_type.length() == 0 com:
             type:CODE_JAVA
node code:node com:
             type:CODE_JAVA
node code: = parceNext(DrakonUtils.getOutNode(cur_node,0), _level); com:
             type:CODE_JAVA
node code:DI_CASE com:ТОЧКА СБОРКИ type:CASE
node code:DI_DEFAULT com:
             type:CODE_JAVA
node code:DI_CASE com:DEFAULT type:CASE
node code:DI_CASE com:
             type:CODE_JAVA
node code:DI_CASE com:CASE type:CASE
node code:DI_FOR_BEG com:
             type:CODE_JAVA
node code:DI_SW com:
             type:CODE_JAVA
node code:return node; com:
             type:CODE_JAVA
node code:DI_FOR_BEG com:НАЧАЛО ЦИКЛА(FOR_BEG) type:CASE
node code:di_type com:
             type:CODE_JAVA
node code:DI_SW com:ВЫБОР(SWITCH) type:CASE
node code:DI_AC com:
             type:CODE_JAVA
node code:DI_FOR_END com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) >= 1 com:
             type:CODE_JAVA
node code:DI_FOR_END com:КОНЕЦ ЦИКЛА(FOR_END) type:CASE
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:for(int i2 = 0; i2 < DrakonUtils.getOutDegree(cur_node); i2++) { com:
             type:CODE_JAVA
node code:DrakonUtils.isReferenceEdge(e) com:
             type:CODE_JAVA
node code:node com:
             type:CODE_JAVA
node code: = parceNext(DrakonUtils.getOutNode(cur_node,i2), _level); com:
             type:CODE_JAVA
node code:return node; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(out_1).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_1).equals(DI_SW) 
|| DrakonUtils.getIconType(out_1).equals(DI_IF) 
|| DrakonUtils.getIconType(out_1).equals(DI_RETURN)
|| DrakonUtils.getIconType(out_1).equals(DI_FOR_BEG)
|| DrakonUtils.getIconType(out_1).equals(DI_CASE)
|| DrakonUtils.getIconType(out_1).equals(DI_BREAK)
|| DrakonUtils.getIconType(out_1).equals(DI_OUTPUT)
|| DrakonUtils.getIconType(out_1).equals(DI_INSERT) com:
             type:CODE_JAVA
node code:null com:тип из группы RG_B  или ВОЗВРАТ или НАЧАЛО ЦИКЛА или ВАРИАНТ? type:IF
node code:break; com:
             type:CODE_JAVA
node code:break; com:break type:BREAK
node code:DrakonUtils.message("Проверка правил выходов не выполняется  "+DrakonUtils.getIconType(cur_node) + "икона:" + DrakonUtils.getComment(cur_node) + "\n"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("----> Записываем файл " + code + "\n"); com:-1- D- Проверка правил выходов не выполняется   type:OUTPUT
node code:str = "ОШИБКА! У Действия \"" + comment + "\" должено быть выход!\n";
 com:
             type:CODE_JAVA
node code:res_str += spaces + str;
 com:добавляем в результат type:ACTION
node code:break; com:
             type:CODE_JAVA
node code:res_str += spaces + str; com:
             type:CODE_JAVA
node code:break; com:break type:BREAK
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:другой тип type:DEFAULT
node code:return cur_node; com:
             type:CODE_JAVA
node code:DI_DG_BEG com:
             type:CODE_JAVA
node code:return null;
}


 com:
             type:CODE_JAVA
node code:DI_EI com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:DI_PROC_BEG com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:str = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +" (тип " + di_type+")";
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы  type:OUTPUT
node code:var str:String = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +"  тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:return; com:null type:RETURN
node code:isCheckOutputs(cur_node) com:
             type:CODE_JAVA
node code:isCheckOutputs(cur_node)
 com:Проверка выходов проходит? type:IF
node code:str = "НАРУШЕНИЕ ПРАВИЛА Вариант! У иконы \"" + comment + "\"  неверный тип выхода ("+ DrakonUtils.getIconType(out_1) +").\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА Вариант! У иконы ... неверный тип выхода. type:OUTPUT
node code:DI_PROC_END com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:
             type:CODE_JAVA
node code:DI_COMPIL_END com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:return false; com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:return cur_node; com:
             type:CODE_JAVA
node code:break; com:break type:BREAK
node code:if (comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:
             type:CODE_JAVA
node code:DI_FOR_END com:
             type:CODE_JAVA
node code:var code:String = ""; com:переменная type:ACTION
node code:String code = ""; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DI_INSERT com:ВСТАВКА type:CASE
node code:DI_BREAK com:
             type:CODE_JAVA
node code:DI_BREAK com:ПРЕКРАЩЕНИЕ type:CASE
node code:break; com:
             type:CODE_JAVA
node code:DrakonUtils.message("-1-D-Проверка не выполняется  "+DrakonUtils.getIconType(cur_node) + "икона:" + DrakonUtils.getComment(cur_node) + "\n"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("----> Записываем файл " + code + "\n"); com:-1-D- Проверка не выполняется   type:OUTPUT
node code:DrakonUtils.debug("-pnx- -2- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:null com:-pnx- n -2-:  type:OUTPUT
node code:/**
  * Этот текст сгенерирован программой DrakonGen2
  * @author Erv +
*/ com:
             type:CODE_JAVA
node code:package ru.erv.drakongen;

import com.tinkerpop.blueprints.pgm.Edge;
import com.tinkerpop.blueprints.pgm.Graph;
import com.tinkerpop.blueprints.pgm.Vertex;
import ru.erv.drakongen.utils.*;
import ru.erv.drakongen.*; 
 com:
             type:CODE_JAVA
node code:public class DrakonGen2 { com:
             type:CODE_JAVA
node code:	public final static String DI_EXT_NEXT = "next";
	public final static String DI_DG_BEG = "DG_BEG";
	public final static String DI_SI_BEG = "SI_BEG";
	public final static String DI_SI_END = "SI_END";
	public final static String DI_CLASS_END = "CLASS_END";
	public final static String DI_COMPIL_BEG = "COMPIL_BEG";
	public final static String DI_COMPIL_END = "COMPIL_END";
	public final static String DI_SH_BEG = "SH_BEG";
	public final static String DI_SH_END = "SH_END"; 
	public final static String DI_PROC_BEG = "PROC_BEG";
	public final static String DI_PROC_END = "PROC_END"; 
	public final static String DI_WR_RES_FILE = "WR_RES_FILE";
	public final static String DI_AC = "AC";		
	public final static String DI_ACTION = "ACTION";		
	public final static String DI_SUB_COMPIL = "SUB_COMPIL";		
	//public final static String DI_IR = "IR";		
	//TODO: удалить DI_ID и DI_IR
	//public final static String DI_EQL = "EQL";		
	//public final static String DI_EQR = "EQR";		
	public final static String DI_IF = "IF";		
	public final static String DI_RY = "RY";		
	public final static String DI_DN = "DN";		
	public final static String DI_EI = "EI";		
	public final static String DI_UK = "UK";		
	public final static String DI_FOR_BEG = "FOR_BEG";		
	public final static String FOR_EACH_BEG = "FOR_EACH_BEG";		
	public final static String DI_FOR_END = "FOR_END";		
	public final static String DI_REF = "REF";
	public final static String DI_BREAK = "BREAK";
	
	public final static String DI_CASE = "CASE";
	public final static String DI_DEFAULT = "DEFAULT";
	public final static String DI_SW = "SWITCH";
	public final static String DI_RETURN = "RETURN";
	public final static String DI_INSERT = "INSERT";
	public final static String DI_OUTPUT = "OUTPUT";
	public final static String DI_NATIVE_CODE = "NATIVE_CODE";
	
	public final static String RELEASE_TYPE_CODE_JAVA = "CODE_JAVA";
	public final static String RELEASE_TYPE_CODE_AS = "CODE_AS";
 com:
             type:CODE_JAVA
node code:protected String res_str = "";
protected boolean load_finish = false;
protected String CURRENT_RELEASE = null;
protected String commentPrefix = "//-- ";
 // RELEASE_TYPE_CODE_AS; com:
             type:CODE_JAVA
node code:public  DrakonGen2() { com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:public String parse_drakon(Graph graph) {
	Object data;
	String descr;
	String di_type;
	
	res_str = ""; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:for (Vertex v : graph.getVertices()) { com:
             type:CODE_JAVA
node code:di_type = DrakonUtils.getIconType(v); ; com:
             type:CODE_JAVA
node code:di_type != null && di_type.equals(DI_DG_BEG) com:
             type:CODE_JAVA
node code:DI_OUTPUT com:
             type:CODE_JAVA
node code:DI_OUTPUT com:ВЫВОД type:CASE
node code:for(var i:int = 0; i < node.inDegree; i++) { com:для всех входов type:FOR_BEG
node code:return code; com:код type:SH_END
node code:public String geReleaseCode(Vertex node) { com:
             type:CODE_JAVA
node code:public String geReleaseCode(Vertex node) { com:Получение рабочего кода узла с маркером type:SH_BEG
node code:DI_INSERT com:
             type:CODE_JAVA
node code:DI_INSERT com:ВСТАВКА type:CASE
node code:DI_BREAK com:
             type:CODE_JAVA
node code:DI_BREAK com:ПРЕКРАЩЕНИЕ type:CASE
node code:setCurReleaseFromNode(v); com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(v) == 1 com:
             type:CODE_JAVA
node code:DrakonUtils.message("---> Разбираем силуэт "); com:
             type:CODE_JAVA
node code:parseSiluet(v); com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:v = DrakonUtils.getOutNode(v,0); com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(v) == 0 com:
             type:CODE_JAVA
node code:return res_str;
}

 com:
             type:CODE_JAVA
node code:DI_INSERT com:
             type:CODE_JAVA
node code:DrakonUtils.message("//-- Схема построена\n\n "); com:
             type:CODE_JAVA
node code:DrakonUtils.error("ОШИБКА! У иконы Начало \"" + DrakonUtils.getOutDegree(v) + "\" выходов!"); com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:
             type:CODE_JAVA
node code:str = "ОШИБКА! У Развилки \"" + comment + "\" должено быть два выхода!\n";
res_str += spaces + str; com:
             type:CODE_JAVA
node code:DI_IF com:
             type:CODE_JAVA
node code://{
//String di_type_edge;
int i = 0;
Vertex term_no = null; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:Edge edge = DrakonUtils.getOutEdge(cur_node,0);
i = 0; com:
             type:CODE_JAVA
node code:!DrakonUtils.isEdgeYes(edge) com:
             type:CODE_JAVA
node code:!DrakonUtils.isEdgeYes(edge) com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:str = "Ошибка! У Развилки \"" + comment + "\" должен быть Да конец!"; com:
             type:CODE_JAVA
node code:edge = DrakonUtils.getOutEdge(cur_node,1);
i = 1; com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:if (i == 0) {
	cur_node_d = DrakonUtils.getOutNode(cur_node,1);
} else {
	cur_node_d = DrakonUtils.getOutNode(cur_node,0);
}
term_no = parceNext(cur_node_d, _level+1);
 com:
             type:CODE_JAVA
node code:null com:неизвестный тип type:DEFAULT
node code:term_yes == null com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(term_yes).equals(DI_FOR_END) com:
             type:CODE_JAVA
node code:break; com:break type:BREAK
node code:return term_yes; com:
             type:CODE_JAVA
node code:in = DrakonUtils.getInNode(node,0);
if(DrakonUtils.getIconType(in).equals(DrakonUtils.DI_DG_BEG)) {
in = DrakonUtils.getInNode(node,1);
}
 com:получаем вход который не НАЧАЛО type:ACTION
node code:if (DrakonUtils.getIconType(term_yes).equals(DI_SH_END) &&
!DrakonUtils.getIconType(term_no).equals(DI_SH_END)) 
term_yes = term_no; com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(in).equals(DI_FILE) com:на входе икона ФАЙЛ? type:IF
node code:return null; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(term_yes) == 1 com:
             type:CODE_JAVA
node code:DrakonUtils.error("На входе DG_LIFT_DOWN \"" + DrakonUtils.getComment(in) + "\" должна быть икона типа FILE  !"); com:На входе DG_LIFT_DOWN должна быть икона FILE type:OUTPUT
node code:return; com:
         type:RETURN
node code:file_nm = DrakonUtils.getCode(in); com:получаем имя входного файла со схемой type:ACTION
node code:Graph graph = new TinkerGraph();
GraphMLReader reader = new GraphMLReader(file_nm, graph);
reader.read();
	
 com:читаем файл GML ридером type:ACTION
node code:di_type.equals(DI_SH_END) || di_type.equals(DI_PROC_END) com:
             type:CODE_JAVA
node code:str = commentPrefix + " ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки \"" + comment +"\" имеет "+ DrakonUtils.getOutDegree(term_yes) +" выходов. Должен быть один. \n";
 com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(term_yes,0); com:
             type:CODE_JAVA
node code:} com:
             type:SH_END
node code:node com:
             type:CODE_JAVA
node code:break; com:break type:BREAK
node code:return term_yes; com:
             type:CODE_JAVA
node code:} //-- конец класса
 com:
             type:SI_END
node code:return node; com:
             type:CODE_JAVA
node code:public static void main(String[] args) { com:main type:PROC_BEG
node code: = parceNext(cur_node, _level); com:
             type:CODE_JAVA
node code:} com:
             type:PROC_END
node code:res_str += spaces +commentPrefix+" " + comment + "\n";
res_str += spaces +"case " + code + ":\n"; com:
             type:CODE_JAVA
node code:da.activate_drakon(graph); com:выполнение активностей type:INSERT
node code:term_yes com:
             type:CODE_JAVA
node code:DrakonAct da com:переменная da type:ACTION
node code:= new DrakonAct(); com:экземпляр класса DrakonAct type:ACTION
node code:} com:
             type:SH_END
node code:Graph graph = new TinkerGraph();

GraphMLReader reader = new GraphMLReader(MAIN_DG_FILE, graph);

try {
	reader.read();
	System.out.println(" <--- Прочитали файл "+ MAIN_DG_FILE);
} catch(Exception e) {
	System.err.println(" err " +e.getMessage());
	e.printStackTrace();
} com:строим Graph из файла Маin type:ACTION
node code:null com:DrakonUtils v.0.0.1 type:null
node code:public DrakonUtils() { com:Конструктор type:SH_BEG
node code:} com:
             type:SH_END
node code:/**
  * Этот текст сгенерирован программой DrakonGen2
  * @author Erv -
*/ com:упоминание о DrakonGen2 type:ACTION
node code:package ru.erv.drakongen;

import com.tinkerpop.blueprints.pgm.Edge;
import com.tinkerpop.blueprints.pgm.Graph;
import com.tinkerpop.blueprints.pgm.Vertex;
import ru.erv.drakongen.utils.*; com:package
imports type:ACTION
node code: public class DrakonUtils { com:class DrakonUtils type:ACTION
node code:></data>";

public final static String DI_EXT_NEXT = "next";
public final static String DI_DG_BEG = "DG_BEG";
public final static String DI_SI_BEG = "SI_BEG";
public final static String DI_SI_END = "SI_END";
public final static String DI_CLASS_END = "CLASS_END";
public final static String DI_COMPIL_BEG = "COMPIL_BEG";
public final static String DI_COMPIL_END = "COMPIL_END";
public final static String DI_SH_BEG = "SH_BEG";
public final static String DI_SH_END = "SH_END"; 
public final static String DI_PROC_BEG = "PROC_BEG";
public final static String DI_PROC_END = "PROC_END"; 
public final static String DI_WR_RES_FILE = "WR_RES_FILE";
public final static String DI_AC = "AC";		
public final static String DI_ACTION = "ACTION";		
public final static String DI_SUB_COMPIL = "SUB_COMPIL";		
public final static String DI_IF = "IF";		
public final static String DI_RY = "RY";		
public final static String DI_DN = "DN";		
public final static String DI_EI = "EI";		
public final static String DI_UK = "UK";		
public final static String DI_FOR_BEG = "FOR_BEG";		
public final static String FOR_EACH_BEG = "FOR_EACH_BEG";		
public final static String DI_FOR_END = "FOR_END";		
public final static String DI_REF = "REF";
public final static String DI_BREAK = "BREAK";

public final static String DI_CASE = "CASE";
public final static String DI_DEFAULT = "DEFAULT";
public final static String DI_SW = "SWITCH";
public final static String DI_RETURN = "RETURN";
public final static String DI_INSERT = "INSERT";
public final static String DI_OUTPUT = "OUTPUT";
public final static String DI_START_ACTS = "START_ACTS";
public final static String DI_NATIVE_CODE = "NATIVE_CODE";

public static final String REM_TRY = "DI_TRY";	
public static final String REM_CATCH = "DI_CATCH";	
public static final String REM_PROC_DOC = "DI_PROC_DOC";	
public static final String REM_CALL_PROC = "DI_CALL_PROC";	

public final static String RELEASE_TYPE_CODE_JAVA = "CODE_JAVA";
public final static String RELEASE_TYPE_CODE_AS = "CODE_AS";
 
	public static enum IcTypes {
		DI_EXT_NEXT,
		DI_DG_BEG,
		DI_SI_BEG,
		DI_SI_END,
		DI_CLASS_END,
		DI_COMPIL_BEG,
		DI_COMPIL_END,
		DI_SH_BEG,
		DI_SH_END, 
		DI_PROC_BEG,
		DI_PROC_END,
		DI_WR_RES_FILE,
		DI_AC,		
		DI_ACTION,		
		DI_SUB_COMPIL,		
		DI_IF,		
		DI_RY,		
		DI_DN,		
		DI_EI,		
		DI_UK,		
		DI_FOR_BEG,		
		FOR_EACH_BEG,		
		DI_FOR_END,		
		DI_REF,
		DI_BREAK,
	
		DI_CASE,
		DI_DEFAULT,
		DI_SW,
		DI_RETURN,
		DI_INSERT,
		DI_OUTPUT,
		DI_START_ACTS,
		DI_NATIVE_CODE,
		
		REM_TRY,	
		REM_CATCH,	
		REM_PROC_DOC,	
		REM_CALL_PROC;	
	};
 com:константы type:ACTION
node code:null com:переменные type:ACTION
node code:null com:Сборка класса DrakonUtils type:DG_BEG
node code:null com:Класс DrakonUtils type:SI_BEG
node code:src\ru\erv\drakongen\DrakonUtils.java com:Записать в файл DrakonUtils.java type:WR_RES_FILE
node code:} //-- конец класса
 com:
             type:SI_END
node code:public static void main(String[] args) { com:main type:PROC_BEG
node code:} com:
             type:PROC_END
node code:public static String getIconType(Vertex node) { com:Получение типа иконы узла type:SH_BEG
node code:return type;
} com:тип type:SH_END
node code:if(node==null)
	return "";
String type =  (String) node.getProperty("type") ;
if(type==null)
	type = ""; com:получаем иконый тип type:ACTION
node code:public static String getComment(Vertex node) { com:Получение комента из узла type:SH_BEG
node code:return ret;
} com:ком. type:SH_END
node code:if(node==null)
	return "";
String ret =  (String) node.getProperty("comment") ; com:получаем коментарий type:ACTION
node code:public static String getCode(Vertex node) { com:Возвращает код из узла type:SH_BEG
node code:if(node == null)
	return "";
return (String)node.getProperty("code") ;
 com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static String getCodeMark(Vertex node) { com:Получение маркера кода type:SH_BEG
node code:return type;
} com:маркер type:SH_END
node code:if(node==null)
	return "";
String type =  (String) node.getProperty("code_mark") ;
if(type==null)
	type = ""; com:получаем маркер кода type:ACTION
node code:public static void message(String str) { com:message() type:SH_BEG
node code:System.out.println(str); com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static int getInDegree(Vertex v) { com:getInDegree() type:SH_BEG
node code:int i = 0;
for (Edge e : v.getInEdges()) {
	if(!DrakonUtils.isReferenceEdge(e))
		i++;
}
return i;
 com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static int getOutDegree(Vertex v) { com:getOutDegree() type:SH_BEG
node code:int i = 0;
for (Edge e : v.getOutEdges()) {
	if(!DrakonUtils.isReferenceEdge(e))
		i++;
}
return i;
 com:строим код type:ACTION
node code:public static Vertex getInNode(Vertex v, int num) { com:getInNode() type:SH_BEG
node code:if(v == null)
	return null;
int i = 0;
for (Edge e : v.getInEdges()) {
	if(DrakonUtils.isReferenceEdge(e))
		continue;
	if(i==num) 
		return e.getOutVertex();
	i++;
}
return null; com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:} com:
             type:SH_END
node code:public static Vertex getOutNode(Vertex v, int num) { com:getOutNode() type:SH_BEG
node code:if(v == null)
	return null;
int i = 0;
for (Edge e : v.getOutEdges()) {
	if(DrakonUtils.isReferenceEdge(e))
		continue;
	if(i==num) 
		return e.getInVertex();
	i++;
}
return null; com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static Edge getOutEdge(Vertex v, int num) { com:getOutEdge() type:SH_BEG
node code:if(v == null)
	return null;
int i = 0;
for (Edge e : v.getOutEdges()) {
	if(DrakonUtils.isReferenceEdge(e))
		continue;
	if(i==num) 
		return e;
	i++;
}
return null; com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static boolean isEdgeYes(Edge edge) { com:isEdgeYes() type:SH_BEG
node code:if(edge == null)
	return false;

String di_type_edge = (String)edge.getProperty("dglabel");
if(di_type_edge == null) return false;

if(di_type_edge.toUpperCase().equals("ДА") || 
		di_type_edge.toUpperCase().equals("YES"))
	return true;
return false; com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static boolean isReferenceEdge(Edge edge) { com:isReferenceEdge() type:SH_BEG
node code:if(edge == null)
	return false;

String di_type_edge = (String)edge.getProperty("type");
if(di_type_edge == null) return false;

if(di_type_edge.toUpperCase().equals("REF") )
	return true;
return false; com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static void error(String str) { com:error() type:SH_BEG
node code:System.err.println(str); com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:public static void debug(String str) { com:debug() type:SH_BEG
node code:if(Settings.isDebug())
	System.out.println(str); com:строим код type:ACTION
node code:} com:
             type:SH_END
node code:dg.parse_drakon(graph);
 com:производим генерацию кода из кодограммы type:ACTION
node code:try { com:try type:ACTION
node code:} catch(Exception e) {
	System.err.println("Error on file: "+ file_nm + " " +e.getMessage());
	e.printStackTrace();
	return;
} 
 com:catch type:ACTION
node code:System.out.println(" ---> Прочитали файл "+ file_nm);

 com:--- type:OUTPUT
node code:file_nm = Settings.getProperty("BASE_DIR") + file_nm; com:считаем что имя файла относительно BASE_DIR type:ACTION
node code:in = DrakonUtils.getInNode(node,0);
if(DrakonUtils.getIconType(in).equals(DrakonUtils.DI_DG_BEG)) {
in = DrakonUtils.getInNode(node,1);
}
 com:получаем вход который не НАЧАЛО type:ACTION
node code:DrakonUtils.getIconType(in).equals(DI_FILE) com:на входе икона ФАЙЛ? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.error("На входе DG_LIFT_UP \"" + DrakonUtils.getComment(in) + "\" должна быть икона типа FILE  !"); com:На входе DG_LIFT_UP должна быть икона FILE type:OUTPUT
node code:return; com:
         type:RETURN
node code:file_nm = DrakonUtils.getCode(in); com:получаем имя входного файла со схемой type:ACTION
node code:CompilationUnit cu = JavaParser.parse(new File(file_nm));
	
 com:производим лексический разбор type:ACTION
node code:FileUtils.fileWrite(file_nm, res);
 com:записываем текст в выходной файл кодограммы type:ACTION
node code:try { com:try type:ACTION
node code:} catch(Exception e) {
	System.err.println("Error on file: "+ file_nm + " " +e.getMessage());
	e.printStackTrace();
	return;
} 
 com:catch type:ACTION
node code:System.out.println(" ---> Записали файл "+ file_nm);

 com:--- type:OUTPUT
node code:file_nm = Settings.getProperty("BASE_DIR") + file_nm; com:считаем что имя файла относительно BASE_DIR type:ACTION
node code:String res = cu.toGraphml();
	
 com:получаем текст GML type:ACTION
node code:file_nm = DrakonUtils.getCode(out); com:получаем имя выходного файла кодограммы type:ACTION
node code:DrakonUtils.getIconType(out).equals(DI_FILE) com:на выходе икона ФАЙЛ? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.error("На выходе DG_LIFT_UP \"" + DrakonUtils.getComment(in) + "\" должна быть икона типа FILE  !"); com:На выходе DG_LIFT_UP должна быть икона FILE type:OUTPUT
node code:return; com:
         type:RETURN
node code:Vertex out = DrakonUtils.getOutNode(node,0); com:получаем выход  type:ACTION
node code:null com:
             type:EI
node code:CURRENT_RELEASE != null && (CURRENT_RELEASE.equals("CODE_PLSQL") || CURRENT_RELEASE.equals("CODE_PGSQL")) com:
             type:CODE_JAVA
node code:di_type == DI_DG_BEG com:реальность CODE_PLSQL ? type:IF
node code:res_str += spaces + "}" + "\n"; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:CURRENT_RELEASE != null && (CURRENT_RELEASE.equals("CODE_PLSQL") || CURRENT_RELEASE.equals("CODE_PGSQL")) com:
             type:CODE_JAVA
node code:di_type == DI_DG_BEG com:реальность CODE_PLSQL ? type:IF
node code:res_str += spaces +"else \n";
 com:записываем в результат "else" type:ACTION
node code:res_str += spaces +"end if;\n";
 com:
             type:CODE_JAVA
node code:res_str += spaces +"}\n";
 com:записываем в результат end if type:ACTION
node code:null com:Изменения! type:null
node code:DrakonUtils.error("111 !!!!!!!!!!!!!!!"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("111!!!!!!!!!!!"); com:111  !!!!!!!!!!!!!! type:OUTPUT
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"if(" + code + ") {\n"; com:
             type:CODE_JAVA
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"if(" + code + ") {\n"; com:записываем if выражение в результат { type:ACTION
node code:null com:Обработка узла.
На входе обрабатываемый узел. type:null
node code:null com:Разбор одного шампура.
На входе узел с которого начинается шампур. type:null
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(next_node).equals(DI_SH_BEG) || DrakonUtils.getIconType(next_node).equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тип след.узла НАЧАЛО ШАМПУРА? type:IF
node code:DrakonUtils.error("!!!!!!!!!!!!!!!"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("!!!!!!!!!!!"); com:!!!!!!!!!!!!!! type:OUTPUT
node code:parceShampur(next_node,_level); com:
             type:CODE_JAVA
node code:parceShampur(next_node,_level); com:Разбираем след. шамапур type:INSERT
node code:str = "Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ \"" + comment + "\" ("+ DrakonUtils.getIconType(cur_node) + ") должен быть ЧАСТЬ СБОРКИ или НАЧАЛО ПРОЦЕДУРЫ. !n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ Должен быть ЧАСТЬ СБОРКИ или НАЧАЛО ПРОЦЕДУРЫ. type:OUTPUT
node code:cur_node.data["url"] == DI_INSERT com:тип тек.узла ВСТАВКА? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(next_node).equals(DI_SH_BEG) || DrakonUtils.getIconType(next_node).equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тип след.узла НАЧАЛО ШАМПУРА? type:IF
node code:di_type == DI_NATIVE_CODE com:узел БЛОК КОДА? type:IF
node code:DrakonUtils.error("ЧТО ЭТО ЗА УЗЕЛ?"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("ЧТО ЭТО ЗА УЗЕЛ?"); com:ЧТО ЭТО ЗА УЗЕЛ? type:OUTPUT
node code:DrakonUtils.getIconType(cur_node).equals(DI_INSERT) com:
             type:CODE_JAVA
node code:parceInsert(cur_node, level); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:parceInsert(cur_node, level);
 com:Разбираем вставку type:INSERT
node code:null com:Изменения! type:null
node code:di_type.equals(DI_NATIVE_CODE) com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:добавляем в результат комментарий и код если они есть type:ACTION
node code:return; com:
         type:RETURN
node code:cur_node = node;
		code= geReleaseCode(cur_node);
		di_type = DrakonUtils.getIconType(cur_node);
		comment = DrakonUtils.getComment(cur_node);
this_comment = comment; 
 com:получаем параметры текущего узла type:ACTION
node code:for (int i = 0; i < _level; i++)  
			spaces += "\t"; com:в строку пробелов добавляем табуляторы по глубине уровня type:ACTION
node code:var cur_node:NodeSprite;
var data:Object;
var comment:String;
var di_type:String;
var code:String;
var type:int;
var edge:EdgeSprite;
var this_comment:String;
var spaces:String = "";
var next_node:NodeSprite; com:переменные type:ACTION
node code:protected function parceSheet(node:NodeSprite, _level:int) { com:Парсер одной простыни type:SH_BEG
node code:parceSheet(next_node,_level); com:
             type:CODE_JAVA
node code:parceSheet(next_node,_level); com:Разбираем след. простыню type:INSERT
node code:null com:
             type:null
node code:DrakonUtils.message(str); com:ОШИБКА! Первый узел должен быть  НАЧАЛО ШАМПУРА type:OUTPUT
node code:var str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + "!";
res_str += spaces + str;
 com:формируем сообщение о ошибке type:ACTION
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:добавляем в результат комментарий и код если они есть type:ACTION
node code:return; com:
         type:RETURN
node code:di_type == DI_SI_END ||
di_type == DI_COMPIL_END com:узел КОНЕЦ (СИЛУЭТА,СБОРКИ,КЛАССА)? type:IF
node code:null com:
             type:SH_END
node code:DrakonUtils.message(str); com:ОШИБКА! Число дочерних узлов у начала шампура не равно 1 type:OUTPUT
node code:str = "ОШИБКА! Число дочерних узлов у начала шампура не равно 1 или 2\n";
 com:формируем сообщение о ошибке type:ACTION
node code:return; com:
         type:RETURN
node code:

 com:получаем след.узел type:ACTION
node code:null com:
             type:EI
node code:cur_node.outDegree == 1 com:выходных ребер 1? type:IF
node code:null com:
             type:EI
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:String str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + " а не "+ di_type + " икона "+comment+" !";
res_str += spaces + str;
 com:
             type:CODE_JAVA
node code:protected void parceSheet(Vertex node, int  _level) { com:
             type:CODE_JAVA
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:di_type.equals(DI_SI_END) ||
di_type.equals(DI_COMPIL_END) ||
di_type.equals(DI_CLASS_END) com:
             type:CODE_JAVA
node code:cur_node = node;
		code= geReleaseCode(cur_node);
		di_type = DrakonUtils.getIconType(cur_node);
		comment = DrakonUtils.getComment(cur_node);
this_comment = comment; 
 com:
             type:CODE_JAVA
node code:for (int i = 0; i < _level; i++)  
			spaces += "\t";
 com:
             type:CODE_JAVA
node code:Vertex cur_node;
		String comment;
		String di_type;
		String code;
		String this_comment;
		String spaces = "";
		Vertex next_node; 
 com:
             type:CODE_JAVA
node code:null com:
             type:COMPIL_BEG
node code:null com:
             type:null
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:DrakonUtils.debug("-psh- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:null com:-psh- n:  type:OUTPUT
node code:}

 com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:String str = "ОШИБКА! Число дочерних узлов у начала шампура не равно 1\n";
 com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 1 com:
             type:CODE_JAVA
node code:next_node= DrakonUtils.getOutNode(cur_node,0);
cur_node = null; com:
             type:CODE_JAVA
node code:Vertex in_node = DrakonUtils.getInNode(node,i); com:
             type:CODE_JAVA
node code:null com:Разбор одной простыни.
На входе узел с которой начинается простыня. type:null
node code:null com:Обходим ветру else чтобы не вставлять пустой блок type:null
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:null com:
             type:EI
node code:CURRENT_RELEASE != null && CURRENT_RELEASE != "" com:реализация установлена? type:IF
node code:code = DrakonUtils.getCode(in_node); com:получаем код из вход. узла type:ACTION
node code:public static void main(String[] args) { com:
             type:PROC_BEG
node code:var in_node:NodeSprite = node.getInEdge(i).source; com:получаем входной узел type:ACTION
node code:public class Test { com:
             type:ACTION
node code:return code; com:код type:RETURN
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:null com:
             type:EI
node code:c:\YandexDisk\FLASH\WRK\JavaWRK\DragonGen2J\src\ru\erv\drakongen\test\Test.java com:
             type:WR_RES_FILE
node code:DrakonUtils.getIconType(in_node) == CURRENT_RELEASE com:это узел текущей реализации? type:IF
node code:} //-- конец класса
 com:
             type:SI_END
node code:null com:
             type:FOR_END
node code:public Test() { com:
             type:PROC_BEG
node code:for(int i = 0; i < DrakonUtils.getInDegree(node); i++) { com:
             type:CODE_JAVA
node code:CURRENT_RELEASE != null && CURRENT_RELEASE.length() != 0 com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getCodeMark(in_node).length() > 0 com:
             type:CODE_JAVA
node code:code = "\n"+commentPrefix+"<DG2J code_mark=\""+/*n"+ (String) in_node.getId() + ":" +*/ DrakonUtils.getCodeMark(in_node) + "\" >\n"
+ code + "\n"
+ ""+commentPrefix+"</DG2J>\n";
 com:
             type:CODE_JAVA
node code:term_yes com:добавляем к коду маркер type:ACTION
node code:String code = ""; com:
             type:CODE_JAVA
node code:var code:String = ""; com:переменная type:ACTION
node code:null com:
             type:null
node code:return code;
}

 com:
             type:CODE_JAVA
node code:null com:Изменения! type:null
node code:return code; com:
             type:CODE_JAVA
node code:di_type.equals(DI_NATIVE_CODE) com:
             type:CODE_JAVA
node code:code = DrakonUtils.getCode(in_node); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(in_node).equals(CURRENT_RELEASE) com:
             type:CODE_JAVA
node code:di_type == DI_NATIVE_CODE com:узел БЛОК КОДА? type:IF
node code:DrakonUtils.getCodeMark(node) com:есть маркер? type:IF
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:return false; com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:str = "НАРУШЕНИЕ ПРАВИЛА! У иконы \"" + comment + "\"  не один выход.\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА! У иконы ... не один выход. type:OUTPUT
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(cur_node) == 0 com:
             type:CODE_JAVA
node code:null com:выходных узлов 0? type:IF
node code:null com:
             type:EI
node code:di_type.equals(DI_SH_END) 
|| di_type.equals(DI_PROC_END) 
|| di_type.equals(DI_SI_END) 
|| di_type.equals(DI_CLASS_END) com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(cur_node,0);  com:
             type:CODE_JAVA
node code:null com:икона из тех что без выхода? type:IF
node code:= parceNext(cur_node, _level + 1); com:
             type:CODE_JAVA
node code:return term_yes; com:
             type:CODE_JAVA
node code:DI_CASE com:
             type:CODE_JAVA
node code:res_str += spaces + commentPrefix + comment + "\n";
res_str += spaces +"switch(" + code + ") {\n"; com:
             type:CODE_JAVA
node code:for(int is2 = 0; is2 < DrakonUtils.getOutDegree(cur_node); is2++) { com:
             type:CODE_JAVA
node code:cur_node_d = DrakonUtils.getOutNode(cur_node,is2);

code = geReleaseCode(cur_node_d);
di_type = DrakonUtils.getIconType(cur_node_d); com:
             type:CODE_JAVA
node code:res_str += spaces +"}\n"; com:
             type:CODE_JAVA
node code:term_yes == null com:
             type:CODE_JAVA
node code:di_type.equals(DI_CASE) 
|| di_type.equals(DI_DEFAULT) com:
             type:CODE_JAVA
node code:public void proc1() { com:
             type:PROC_BEG
node code:public class Test { com:
             type:ACTION
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:c:\YandexDisk\FLASH\WRK\JavaWRK\DragonGen2J\src\ru\erv\drakongen\test\Test.java com:
             type:WR_RES_FILE
node code:} //-- конец класса
 com:
             type:SI_END
node code:public Test() { com:
             type:PROC_BEG
node code:null com:
             type:COMPIL_BEG
node code:null com:
             type:null
node code:null com:Эта проверка не нужна т.к. уже выполнилась type:null
node code:str = "Ошибка! У Иконы ВЫБОР \"" + comment + "\" все ребра должны вести к Case иконам!"; com:
             type:CODE_JAVA
node code:null com:
         type:SH_END
node code:return null; com:
             type:CODE_JAVA
node code:null com:
             type:SH_END
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:DI_SW com:
             type:CODE_JAVA
node code:str = commentPrefix + "ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки \"" + comment +"\" имеет "+ DrakonUtils.getOutDegree(term_yes) +" выходов. Должен быть один. \n";
 com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(term_yes) == 1 com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(term_yes,0); com:
             type:CODE_JAVA
node code:return node; com:
             type:CODE_JAVA
node code:return term_yes; com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:
             type:CODE_JAVA
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:c:\YandexDisk\FLASH\WRK\JavaWRK\DragonGen2J\src\ru\erv\drakongen\test\Test.java com:
             type:WR_RES_FILE
node code:} //-- конец класса
 com:
             type:SI_END
node code:public Test() { com:
             type:PROC_BEG
node code:null com:
             type:COMPIL_BEG
node code:null com:
             type:null
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:node com:
             type:CODE_JAVA
node code:

 com:
             type:SH_END
node code: = parceNext(cur_node, _level); com:
             type:CODE_JAVA
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:res_str += spaces + str; com:
             type:CODE_JAVA
node code:public static void main(String[] args) { com:
             type:PROC_BEG
node code:= parceNext(cur_node_d, _level + 1); com:
             type:CODE_JAVA
node code:term_yes com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces + code +"\n"; com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 1 com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:DI_FOR_BEG com:
             type:CODE_JAVA
node code:public Test() { com:
             type:PROC_BEG
node code:null com:
             type:COMPIL_BEG
node code:null com:
             type:null
node code:null com:
             type:ACTION
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:res_str += str; com:
             type:CODE_JAVA
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:Vertex term com:
             type:CODE_JAVA
node code:public static void main(String[] args) { com:
             type:PROC_BEG
node code:= parceNext(cur_node, _level + 1); com:
             type:CODE_JAVA
node code:public void proc1() { com:
             type:PROC_BEG
node code:str = "ОШИБКА! У Начала цикла \"" + comment + "\" должен быть один выход!\n";
 com:
             type:CODE_JAVA
node code:public class Test { com:
             type:ACTION
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:res_str += spaces +"}\n"; com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(term).equals(DI_FOR_END) com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:res_str += str; com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:public static void main(String[] args) { com:
             type:PROC_BEG
node code:public void proc1() { com:
             type:PROC_BEG
node code:str = "ОШИБКА! У Цикла \"" + comment + "\" нет конца!\n"; com:
             type:CODE_JAVA
node code:return term; com:
             type:CODE_JAVA
node code:public class Test { com:
             type:ACTION
node code:DrakonUtils.getOutDegree(term) == 1 com:
             type:CODE_JAVA
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:str = "ОШИБКА! У Цикла \"" + comment + "\" нет продолжения пути!\n"; com:
             type:CODE_JAVA
node code:c:\YandexDisk\FLASH\WRK\JavaWRK\DragonGen2J\src\ru\erv\drakongen\test\Test.java com:
             type:WR_RES_FILE
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:} //-- конец класса
 com:
             type:SI_END
node code:res_str += str;
 com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(term,0);  com:
             type:CODE_JAVA
node code:return term; com:
             type:CODE_JAVA
node code:node com:
             type:CODE_JAVA
node code: = parceNext(cur_node, _level); com:
             type:CODE_JAVA
node code:

 com:
             type:SH_END
node code:

 com:
             type:SH_END
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:public static void main(String[] args) { com:
             type:PROC_BEG
node code:public void proc1() { com:
             type:PROC_BEG
node code:public class Test { com:
             type:ACTION
node code:package ru.erv.drakongen.test ;

 com:
         type:ACTION
node code:c:\YandexDisk\FLASH\WRK\JavaWRK\DragonGen2J\src\ru\erv\drakongen\test\Test.java com:
             type:WR_RES_FILE
node code:return node; com:
             type:CODE_JAVA
node code:null com:сбрасываем терминатор type:ACTION
node code:term_yes = null; com:
             type:CODE_JAVA
node code:null com:-psh- n:  type:OUTPUT
node code:} //-- конец класса
 com:
             type:SI_END
node code:DrakonUtils.debug("-psh- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:public Test() { com:
             type:PROC_BEG
node code:null com:-pnx- n:  type:OUTPUT
node code:null com:
             type:COMPIL_BEG
node code:DrakonUtils.debug("-pnx- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:var et:String = cur_node.DrakonUtils.getOutEdge(i).data["url"]; com:получаем тип выхода type:ACTION
node code:Edge e = DrakonUtils.getOutEdge(cur_node, i2);
 com:
             type:CODE_JAVA
node code:null com:идем по ветке Да пока не дойдем до терминатора type:null
node code:DrakonUtils.getIconType(out_1).equals(DI_SUB_COMPIL) com:
             type:CODE_JAVA
node code:DI_OUTPUT com:ВЫВОД type:CASE
node code:DI_SUB_COMPIL com:
             type:CODE_JAVA
node code:DI_CASE com:ЧАСТЬ СБОРКИ type:CASE
node code:null com:Временно обходим проверку type:null
node code:null com:Временно обходим проверку type:null
node code:null com:
             type:EI
node code:return true; com:
             type:CODE_JAVA
node code:null com:истина type:RETURN
node code:private function configListeners(dispatcher:IEventDispatcher):void 	{ com:Конфигурация листнеров type:SH_BEG
node code:			// Add a completion event listener
			dispatcher.addEventListener(Event.COMPLETE, onLoadingFinesh);
 com:строим код type:ACTION
node code:null com:
             type:SH_END
node code:public function loadData(query:String):void	{ com:Загрузка данных type:SH_BEG
node code:			//var query:String = "file://c:/temp/s.graphml";
			// Create an Actionscript URL loader
			var loader:URLLoader = new URLLoader();
			// Wire up event listeners for our load process                      
			configListeners(loader);
			// Create a URL request with the path to the GraphML file
			var request:URLRequest = new URLRequest(query);
			try {
				// Initiate the loading process
				load_finish = false;
				graph_data = null;
				
				loader.load(request);
			} catch (error:Error) {
				DrakonUtils.message("Unable to load requested document.");
			}
 com:строим код type:ACTION
node code:private function onLoadingFinesh(event:Event):void { com:Обработка события "загрузка завершена" type:SH_BEG
node code:null com:тип ЧАСТЬ СБОРКИ? type:IF
node code:			// Get event data - which should be the loaded object
			var loader:URLLoader = URLLoader(event.target);
			
			// Get XML from the loaded object
			var str:String = loader.data;
			
			//-- правим файл убираем лишние xmlns
			str = str.replace("xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ", "");
			str = str.replace(" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\"", "");
			
			//DrakonUtils.message(str);
			var graphML:XML = new XML(str);
			
			// Use Flare converter to convert GraphML to dataset 
			var gmlc:MyGraphMLConverter = new MyGraphMLConverter();
			var dataSet:DataSet = gmlc.parse(graphML);
			
			// Pass the dataset to our graph routine                  
			graph_data = Data.fromDataSet(dataSet);
			load_finish = true;
			
			buildVis();
			parseDrakon();
 com:строим код type:ACTION
node code:

 com:
             type:SH_END
node code:null com:
             type:SH_END
node code:public function buildVis():void { com:Отрисовка графа загруженного функцией loadData() type:SH_BEG
node code:			build_vis(graph_data);
 com:строим код type:ACTION
node code:null com:
             type:SH_END
node code:protected function build_vis(data:Data):void { com:Отрисовка графа type:SH_BEG
node code:			var i = 0;
			for each (var tuple:NodeSprite in data.nodes)
			{
				var _d = tuple.data;
				//tuple.x = new Number(_d["X"]);
				//tuple.y = new Number(_d["Y"]);
				tuple.x = _d["X"];
				tuple.y = _d["Y"];
				tuple.size = 1.5;
				switch(tuple.data["url"]) {
					case DI_DG_BEG:
						tuple.fillColor =   0xFFFFFF;
						break;
					case DI_SI_BEG:
						tuple.fillColor =   0x0000FF;
						break;
					case DI_SI_END:
						tuple.fillColor =   0x0000FF;
						break;
					case DI_SH_BEG:
						tuple.fillColor =   0x00FF00;
						break;
					case DI_SH_END:
						tuple.fillColor =   0x00FF00;
						break;
					case DI_WR_RES_FILE:
						tuple.fillColor =   0xFFFFFF;
						break;
					case DI_AC:
						tuple.fillColor =   0xFFFF00;
						break;
					case DI_IF:
					case DI_ID:
					case DI_IR:
						tuple.fillColor =   0xFF0F0F;
						break;
					case DI_RY:
						tuple.fillColor =   0xFF0F0F;
						break;
					case DI_DN:
						tuple.fillColor =   0xFF0F0F;
						break;
					case DI_EI:
						tuple.fillColor =   0xFF0F0F;
						tuple.size = 0.7;
						break;
					default:
				}
				//tuple.fillColor =   0xFF0F0F;
				//tuple.lineColor = 0x00FF00;
				//tuple.lineWidth = 3;
				//tuple.w = 150.;
				//tuple.radius = 150.;
				tuple.fillAlpha = 1.;
			}
			var vis:Visualization = new Visualization(data);
			Main.main.addChild(vis);
			vis.x = 400;
			vis.y = 400;
			vis.scaleX = 1.;
			vis.scaleY = 1.;
			vis.update();
			vis.operators.add(new CircleLayout());
			// Do something here...        
 com:строим код type:ACTION
node code:null com:
             type:SH_END
node code:public function zoomAll():void { com:Масштабирование картинки type:SH_BEG
node code:			Main.informer.writeDebugRightField("before",graph_data.nodes[0].x);
			for each (var tuple:NodeSprite in graph_data.nodes) {
				tuple.x = Main.main.toDisplayX(tuple.data["X"]);
				tuple.y = Main.main.toDisplayY(tuple.data["Y"]);
			}
			Main.informer.writeDebugRightField("after", graph_data.nodes[0].x);
 com:строим код type:ACTION
node code:null com:
             type:SH_END
node code:null com:
             type:SH_END
node code:DI_OUTPUT com:
             type:CODE_JAVA
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:protected void build_vis(Object data) { com:
             type:CODE_JAVA
node code:public void zoomAll() { com:
             type:CODE_JAVA
node code:public void loadData(String query) { com:
             type:CODE_JAVA
node code:private void configListeners() { com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:file_nm = Settings.getProperty("BASE_DIR") + file_nm; com:считаем что имя файла относительно BASE_DIR type:ACTION
node code:}

 com:
             type:CODE_JAVA
node code:Settings.setProperty("BASE_DIR", "..\\..\\..\\WRK\\DG2J\\DragonGen2J\\"); com:устанавливаем BASE_DIR type:ACTION
node code:private void onLoadingFinesh() { com:
             type:CODE_JAVA
node code:System.out.println(cu.toString());

 com:-- Выводим контрольный текст  ... type:OUTPUT
node code:null com:
             type:CODE_JAVA
node code:String file_nm = "";
String it = DrakonUtils.getIconType(node);
DrakonGen2 dg = null;

 com:переменные type:ACTION
node code:}

 com:
             type:CODE_JAVA
node code:for (Vertex v : graph.getVertices()) { com:Проходим по всем узлам type:FOR_BEG
node code:public void buildVis() { com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(v).equals(DrakonUtils.DI_START_ACTS) com:узел ЗАПУСК АКТИВНОСТЕЙ? type:IF
node code:null com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(v) == 1 com:у текущего узла один выход? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(v) == 0 com:у текущего узла нет выходов? type:IF
node code:null com:
             type:EI
node code:}

 com:
             type:CODE_JAVA
node code:		public function parseDrakon() { com:Парсер схемы ДРАКОНА полученной из графа yEd type:SH_BEG
node code:	parse_drakon(graph_data);
 com:строим код type:ACTION
node code:null com:
             type:SH_END
node code:DrakonUtils.error("ОШИБКА! У иконы Начало \"" + DrakonUtils.getOutDegree(v) + "\" выходов!"); com:ОШИБКА! У иконы Начало ...
 выходов! type:OUTPUT
node code:public void parseDrakon() { com:
             type:CODE_JAVA
node code:return; com:
         type:RETURN
node code:null com:
             type:CODE_JAVA
node code:parseSiluet(v); com:Разбираем силуэт type:INSERT
node code:}

 com:
             type:CODE_JAVA
node code:DrakonUtils.message("---> Разбираем силуэт "); com:--- type:OUTPUT
node code:} //-- конец класса com:
             type:CODE_JAVA
node code:DrakonUtils.message("--- Конец активности "); com:-- Схема построена type:OUTPUT
node code:src/ru/erv/drakongen/DrakonGen2.java com:CODE_JAVA

DrakonGen2.java type:CODE_JAVA
node code:v = DrakonUtils.getOutNode(v,0);
 com:теперь текущий узел тот на который указывает выход type:ACTION
node code:null com:~DG2A - type:null
node code:protected void activate_drakon(Graph graph) {
 com:Запускаем graph на выполнение type:SH_BEG
node code:} com:
             type:SH_END
node code:null com:
             type:FOR_END
node code:activate_drakon_single(graph);  com:Запускаем graph на 
выполнение по одному type:INSERT
node code:} com:
             type:SH_END
node code:null com:
             type:EI
node code:cur_node = DrakonUtils.getOutNode(cur_node,0);
 com:теперь текущий узел тот на который указывает выход type:ACTION
node code:Vertex act_node = null; 
String name = DrakonUtils.getComment(cur_node);				
for (Vertex v : graph.getVertices()) {
	//-- узел НАЧАЛО?
	if(v!= cur_node && DrakonUtils.getIconType(v).equals(DrakonUtils.DI_DG_BEG)) {
		if(DrakonUtils.getComment(v).equals(name)) {
			act_node = v;
			break;
		}
	} else {
	}
} com:ищем в кодограмме НАЧАЛО с таким же именем type:ACTION
node code:DrakonUtils.getIconType(cur_node).equals(DrakonUtils.DI_DG_BEG) com:узел НАЧАЛО? type:IF
node code:DrakonUtils.error("ОШИБКА! У иконы ЗАПУСК АКТИВНОСТЕЙ неправильный тип выхода \"" + DrakonUtils.getIconType(cur_node) + "\""); com:ОШИБКА! У иконы ЗАПУСК АКТИВНОСТЕЙ неправильный тип выхода. type:OUTPUT
node code:return; com:
         type:RETURN
node code:act_node != null com:нашли? type:IF
node code:activate_siluet(act_node); com:Выполняем силуэт от ТС type:INSERT
node code:DrakonUtils.error("ОШИБКА! У иконы Начало \"" + DrakonUtils.getOutDegree(cur_node) + "\" выходов!"); com:ОШИБКА! Не нашли узла с именем ... как у стартовой последовательности.  type:OUTPUT
node code:return; com:
         type:RETURN
node code:while(DrakonUtils.getOutDegree(cur_node) == 1) { com:Проходим по всем узлам ЗАПУСКА type:FOR_BEG
node code:null com:
             type:FOR_END
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:break; com:break type:BREAK
node code:cur_node = v;
 com:теперь текущий узел ЗАПУСК type:ACTION
node code:Vertex cur_node = null;
 com:теперь текущий узел null type:ACTION
node code:cur_node != null com:нашли узел ЗАПУСКА? type:IF
node code:null com:
             type:EI
node code:activate_siluet(v); com:Выполняем силуэт от ТС type:INSERT
node code:protected void activate_siluet(Vertex v) {
 com:Выполняем силуэт от ТС type:SH_BEG
node code:null com:
             type:ACTION
node code:if (comment != null)
	res_str += spaces + commentPrefix +  comment + "\n";
if (code != null)
	res_str += spaces +code + "\n";
 com:добавляем коментарий и код в результат type:ACTION
node code:null com:DrakonGen v.0.9.7 type:null
node code:data = n.data;
di_type = data["url"];
 com:получаем тип узла type:ACTION
node code:protected function parceShampur(node:NodeSprite, _level:int) { com:Парсер одного шампура type:SH_BEG
node code:protected function parceNext(cur_node:NodeSprite, _level:int):NodeSprite {
/**
 * @param	cur_node
 * @param	res_str
 * @return terminator - последний узел на котором закончилось движение
 */ com:Разбор ветки type:SH_BEG
node code:public function DrakonGen2() { com:Конструктор type:SH_BEG
node code:null com:
             type:SH_END
node code:return null; com:null type:SH_END
node code:/**
  * Этот текст сгенерирован программой DrakonGen2
  * @author Erv +
*/
 com:упоминание о DrakonGen2 type:ACTION
node code:package drakongen 
{
	
	import flare.query.Not;
	import flash.events.Event;
	import flash.events.IEventDispatcher;
	import flash.net.URLLoader;
	import flash.net.URLRequest;

	import flare.vis.data.EdgeSprite;
	import flare.vis.data.NodeSprite;
	import flare.vis.events.VisualizationEvent;
	import flare.vis.operator.layout.CircleLayout;
	import flare.vis.data.Data;
	import flare.data.DataSet;
	import flare.vis.Visualization;
	
	import drakongen.utils.FileUtils;
 com:package
imports type:ACTION
node code: public class DrakonGen2 { com:class DrakonGen2 type:ACTION
node code:public const DI_EXT_NEXT:String = "next";

public const DI_DG_BEG:String = "DG_BEG";
public const DI_SI_BEG:String = "SI_BEG";
public const DI_SI_END:String = "SI_END";
public const DI_COMPIL_BEG:String = "COMPIL_BEG";
public const DI_COMPIL_END:String = "COMPIL_END";


public const DI_SH_BEG:String = "SH_BEG";
public const DI_SH_END:String = "SH_END"; 
public const DI_PROC_BEG:String = "PROC_BEG";
public const DI_PROC_END:String = "PROC_END"; 

public const DI_WR_RES_FILE:String = "WR_RES_FILE";

public const DI_AC:String = "AC";		
public const DI_ACTION:String = "ACTION";		
public const DI_ID:String = "ID";		
public const DI_IR:String = "IR";		
//TODO: удалить DI_ID и DI_IR
public const DI_IF:String = "IF";		
public const DI_RY:String = "RY";		
public const DI_DN:String = "DN";		
public const DI_EI:String = "EI";		
public const DI_UK:String = "UK";		
public const DI_EQL:String = "EQL";		
public const DI_EQR:String = "EQR";		
public const DI_FOR_BEG:String = "FOR_BEG";		
public const FOR_EACH_BEG:String = "FOR_EACH_BEG";		
public const DI_FOR_END:String = "FOR_END";		
public const DI_REF:String = "REF";

public const DI_CASE:String = "CASE";
public const DI_SW:String = "SWITCH";

public const RELEASE_TYPE_CODE_JAVA:String = "CODE_JAVA";
public const RELEASE_TYPE_CODE_AS:String = "CODE_AS"; com:константы type:ACTION
node code:protected var res_str:String = "";
protected var load_finish:Boolean = false;
protected var graph_data;

protected var CURRENT_RELEASE:String = RELEASE_TYPE_CODE_AS;  com:переменные type:ACTION
node code:return res_str;
 com:результирующая строка type:SH_END
node code:null com:
             type:FOR_END
node code:for each(var n:NodeSprite in gd.nodes)  { com:Проходим по всем узлам type:FOR_BEG
node code:di_type == DI_DG_BEG com:узел НАЧАЛО? type:IF
node code:}

 com:
             type:SH_END
node code:public String reverseCode() { com:reverseCode() type:PROC_BEG
node code:protected boolean geReleaseCode(String full_file_name) { com:Формирование карты подстановок для одного файла type:SH_BEG
node code:return RET_OK;
} com:Ok type:SH_END
node code:Wrapper<Integer> i = new Wrapper<Integer>(0);
while(true) { com:бесконечный поиск PREF_MARKER_DG2J type:FOR_BEG
node code:null com:
             type:FOR_END
node code:insert_codes.get(mark_code) != null com:уже есть такой маркер в карте подстановок?  type:IF
node code:return RET_ERROR; com:Error type:RETURN
node code:String mark_code = getTextBetween(text,DrakonUtils.PREF_MARKER_DG2J,"\"",i); com:ищем маркер  type:ACTION
node code:System.err.println("Ошибка! Дублирование маркера кода ..."); com:Ошибка! Дублирование маркера кода ... type:OUTPUT
node code:null com:
             type:EI
node code:n.outDegree == 1 com:у текущего узла один выход? type:IF
node code:null com:
             type:EI
node code:n.outDegree == 0 com:у текущего узла нет выходов? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.message("ОШИБКА! У иконы Начало \"" + n.outDegree + "\" выходов!"); com:ОШИБКА! У иконы Начало ...
 выходов! type:OUTPUT
node code:return null; com:null type:RETURN
node code:parseSiluet(n); com:Разбираем диаграмму type:INSERT
node code:DrakonUtils.message("---> Разбираем силуэт "); com:--- type:OUTPUT
node code:DrakonUtils.message(commentPrefix+" Схема построена\n\n " + res_str); com:-- Схема построена type:OUTPUT
node code:null com:
             type:EI
node code:String text = FileUtils.fileRead(full_file_name,"UTF-8");
 com:открываем файл и читаем текст в UTF-8 type:ACTION
node code:Iterator<String> itf = files.iterator();
while (itf.hasNext()) { com:для всех файлов из списка type:FOR_BEG
node code:null com:
             type:FOR_END
node code:geReleaseCode(full_file_name); com:Формирование карты подстановок для одного файла type:INSERT
node code:bret == RET_ERROR com:вернулась ошибка? type:IF
node code:return null; com:null type:RETURN
node code:System.err.println("Ошибка при реверскодинге файла " + full_file_name); com:Ошибка при реверскодинге файла ... type:OUTPUT
node code:null com:
             type:EI
node code:String gml_text = FileUtils.fileRead(gml_src_file); com:читаем входной graphml файл в переменную-буфер type:ACTION
node code:null com:Разбор начинается от узла НАЧАЛО
 type:null
node code:CODE_JAVA com:Сборка класса DrakonGen2 type:DG_BEG
node code:n = n.DrakonUtils.getOutNode(0);
 com:теперь текущий узел тот на который указывает выход type:ACTION
node code:protected function parse_drakon(gd:Data):String {
var data:Object;
var descr:String;
var di_type:String;
res_str = "";
 com:Парсер схемы type:SH_BEG
node code:var cur_node:NodeSprite;
var data:Object;
var comment:String;
var di_type:String;
var code:String;
var type:int;
var edge:EdgeSprite;
var this_comment:String;
var spaces:String = "";
var next_node:NodeSprite; com:переменные type:ACTION
node code:for (var i:int = 0; i < _level; i++)  
	spaces += "\t";
 com:в строку пробелов добавляем табуляторы по глубине уровня type:ACTION
node code:cur_node = node;
		code= geReleaseCode(cur_node);
		di_type = DrakonUtils.getIconType(cur_node);
		comment = DrakonUtils.getComment(cur_node);
this_comment = comment; 
 com:получаем параметры текущего узла type:ACTION
node code:di_type == DI_SH_BEG || di_type == DI_PROC_BEG com:узел НАЧАЛО ШАМПУРА? type:IF
node code:null com:
             type:EI
node code:return; com:
         type:RETURN
node code:public static final boolean RET_OK  = true;
public static final boolean RET_ERROR  = false;
public static final String PREF_NODE_ID = "<node id=\"";
public static final String POST_NODE_ID = "\"";
 com:константы type:ACTION
node code:try { com:try type:ACTION
node code:} catch(Exception e) {
	System.err.println(e.getMessage() );
} com:catch type:ACTION
node code:boolean bret = com:bret= type:ACTION
node code:			String full_file_name = itf.next();
			System.out.println("-- Сформирована карта подстановок для файла:"+full_file_name);
 com:получаем полное имя файла type:ACTION
node code:	List<String> files = new ArrayList<String>();
	String gml_src_file;
	String gml_tgt_file;
	
	public List<String> getFiles() {
		return files;
	}

	public void setFiles(List<String> files) {
		this.files = files;
	}

	Map<String, String> insert_codes = new HashMap<String, String>();
 com:перменные type:ACTION
node code:files.add("/src/ru/erv/drakongen/test/Test.java"); com:список файлов type:ACTION
node code:String gml_src_file = "../Schemes/test.graphml";
String gml_tgt_file = "../Schemes/test2.graphml";
 com:Файлы graphml
"../Schemes/test.graphml" type:ACTION
node code:mark_code != null com:нашли маркер?  type:IF
node code:null com:
             type:EI
node code:var str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + "!";
res_str += spaces + str;
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! Первый узел должен быть  НАЧАЛО ШАМПУРА type:OUTPUT
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:добавляем в результат комментарий и код если они есть type:ACTION
node code:cur_node.outDegree == 2 com:выходных ребер 2? type:IF
node code:null com:
             type:EI
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
di_type = edge.target.data["url"];
 com:получаем тип первго выхода type:ACTION
node code:di_type == DI_SH_BEG || di_type == DI_PROC_BEG || di_type == DI_SI_END || di_type == DI_COMPIL_END com:на первом выходе НАЧАЛО ШАМПУРА или КОНЕЦ СИЛУЭТА
или БЛОК КОДА? type:IF
node code:null com:
             type:EI
node code:next_node = edge.target;
cur_node = cur_node.DrakonUtils.getOutNode(1);
 com:след.узлом будет тот что на втором выходе, а текущим станет тот что на первом type:ACTION
node code:next_node = cur_node.DrakonUtils.getOutNode(1);
cur_node = cur_node.DrakonUtils.getOutNode(0);
 com:след.узлом будет тот что на первом  выходе, а текущим станет тот что на втром type:ACTION
node code:break; com:break type:BREAK
node code:String out_text = getTextBetween(text,">","</DG2J>",i);
 com:ищем текста подстановки type:ACTION
node code:out_text != null com:нашли текста подстановки?  type:IF
node code:null com:
             type:EI
node code:break; com:break type:BREAK
node code:insert_codes.put(mark_code, out_text); com:заносим текст подстановки в карту замен type:ACTION
node code:public static void main(String[] args) { com:main type:PROC_BEG
node code:} com:
             type:PROC_END
node code:= rc.reverseCode(); com:реверс кодинд фала gml type:INSERT
node code:ReverseCoding rc  com:переменная rc type:ACTION
node code:cur_node.outDegree == 1 com:выходных ребер 1? type:IF
node code:null com:
             type:EI
node code:cur_node = cur_node.DrakonUtils.getOutNode(0);
next_node = null;


 com:след.узла не будет, а текущим станет тот что на первом type:ACTION
node code:return; com:
         type:RETURN
node code:str = "ОШИБКА! Число дочерних узлов у начала шампура не равно 1 или 2\n";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! Число дочерних узлов у начала шампура не равно 1 или 2 type:OUTPUT
node code:null com:Разбираемся с вилкой НАЧАЛА ШАМПУРА type:null
node code:var term:NodeSprite = parceNext(cur_node, _level + 1); com:Разбираем ветку type:INSERT
node code:term == null com:вернулся пустой терминатор? type:IF
node code:null com:
             type:EI
node code:= new ReverseCoding(); com:экземпляр класса ReverseCoding type:ACTION
node code:public static String getTextBetween(String text, String prefix, String postfix,  Wrapper<Integer>  position) { com:Выделение текста между префиксом и постфиксом начиная с позиции pos type:SH_BEG
node code:}
 com:
         type:SH_END
node code:null com:
             type:EI
node code:int i2 = text.indexOf(postfix,i1+prefix.length()+1); com:ищем постфикс от конца префикса  type:ACTION
node code:i1 >= 0 com:нашли префикс?  type:IF
node code:int i1 = text.indexOf(prefix,position.getValue()); com:ищем фразу префикса type:ACTION
node code:i2>=0 com:нашли постфикс?  type:IF
node code:null com:
             type:EI
node code:return null; com:null type:RETURN
node code:return null; com:null type:RETURN
node code://-- Должна вернуть asdf
String text = " <111>asdf<222>-<111>fdsa<222> ";		
Wrapper<Integer> pos = new Wrapper<Integer>(0);
System.out.println(ReverseCoding.getTextBetween(text,"<111>","<222>",pos)); 
System.out.println(pos.getValue());
System.out.println(ReverseCoding.getTextBetween(text,"<111>","<222>",pos)); 
System.out.println(pos.getValue());


text = "<111>asdf<222><111>fdsa<222> ";		
pos.setValue(0);
System.out.println(ReverseCoding.getTextBetween(text,"<111>","<222>",pos)); 
System.out.println(pos.getValue());
System.out.println(ReverseCoding.getTextBetween(text,"<111>","<222>",pos)); 
System.out.println(pos.getValue());
 com:Тест  type:OUTPUT
node code:position.setValue(i2+postfix.length());
return text.substring(i1+prefix.length(),i2); com:результат type:RETURN
node code:static class Wrapper<T> {
	T value;
	Wrapper(T value){
	this.value = value;
	}

	public T getValue() {
	return value;
	}

	public void setValue(T value) {
	this.value = value;
	}
} com:вспомогательный class Wrapper T  type:ACTION
node code:null com:возвращает выделенные текст и позицию за префиксом через параметр  type:null
node code:null com:Переписать с учетом того, что code_mark может стоять где угодно type:null
node code:null com:Замена кода в кодограмме на код из файлов нижнего уровня.Возвращает измененный текст graphml type:null
node code:Settings.setProperty("BASE_DIR", "..\\..\\..\\WRK\\DG2J\\DragonGen2J\\");
 com:устанавливаем BASE_DIR type:ACTION
node code:return out_text;
} com:новый текст gml type:SH_END
node code:String out_text = "";
 com:задаем переменные type:ACTION
node code:String out_text com:переменная out_text type:ACTION
node code:String gml_tgt_file = "../Schemes/test2.graphml";
FileUtils.fileWrite(Settings.getProperty("BASE_DIR") + gml_tgt_file, out_text);
 com:записываем новый файл gml type:ACTION
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:null com:M1 type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:BegD type:null
node code:null com:EndD type:null
node code:null com:D1 type:null
node code:var str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + "!";
res_str += spaces + str;
 com:формируем сообщение о ошибке type:ACTION
node code:return; com:
         type:RETURN
node code:null com:
             type:null
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:DrakonUtils.getIconType(next_node).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:null com:Mn type:null
node code:null com:
             type:EI
node code:null com:
             type:null
node code:di_type == DI_NATIVE_CODE com:след узел узел БЛОК КОДА? type:IF
node code:null com:BegD type:null
node code:return; com:
             type:CODE_JAVA
node code:null com:EndD type:null
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:Dn type:null
node code:String str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + " а не "+ di_type + " икона "+comment+" !";
res_str += spaces + str;
 com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:DrakonUtils.message(str); com:ОШИБКА! Первый узел должен быть  НАЧАЛО ШАМПУРА type:OUTPUT
node code:null com:
             type:null
node code:null com:
             type:EI
node code:parceShampur(next_node,_level); com:Разбираем след. шамапур type:INSERT
node code:null com:
             type:EI
node code:next_node != null com:есть след.узел? type:IF
node code:null com:
             type:null
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:DrakonUtils.getIconType(next_node).equals(DI_SH_BEG) || DrakonUtils.getIconType(next_node).equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:null com:M2 type:null
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тип след.узла НАЧАЛО ШАМПУРА? type:IF
node code:null com:
             type:null
node code:DrakonUtils.error("222 !!!!!!!!!!!!!!!"); com:
             type:CODE_JAVA
node code:null com:BegD type:null
node code:DrakonUtils.message("222!!!!!!!!!!!"); com:222  !!!!!!!!!!!!!! type:OUTPUT
node code:null com:EndD type:null
node code:parceShampur(next_node,_level); com:
             type:CODE_JAVA
node code:null com:D2 type:null
node code:next_node != null com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:parceSheet(next_node,_level); com:
             type:CODE_JAVA
node code:null com:Разбираем след. блок кода type:INSERT
node code:DrakonUtils.error("ЧТО ЭТО ЗА УЗЕЛ В ПРОСТЫНЕ?"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("ЧТО ЭТО ЗА УЗЕЛ?"); com:ЧТО ЭТО ЗА УЗЕЛ В ПРОСТЫНЕ? type:OUTPUT
node code:null com:
             type:EI
node code:null com:след узел КОНЕЦ (СИЛУЭТА,СБОРКИ,КЛАССА)? type:IF
node code:null com:
             type:null
node code:DrakonUtils.getIconType(next_node).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:di_type == DI_NATIVE_CODE com:след узел ПРОСТЫНЯ ? type:IF
node code:DrakonUtils.message("ЧТО ЭТО ЗА УЗЕЛ В ПРОЦЕДУРЕ?"); com:ЧТО ЭТО ЗА УЗЕЛ В ПРОЦЕДУРЕ? type:OUTPUT
node code:null com:
             type:EI
node code:parceSheet(next_node,_level); com:
             type:CODE_JAVA
node code:parceShampur(next_node,_level); com:Разбираем след. блок кода type:INSERT
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:DrakonUtils.getIconType(next_node).equals(DI_SI_END) ||
DrakonUtils.getIconType(next_node).equals(DI_COMPIL_END) ||
DrakonUtils.getIconType(next_node).equals(DI_CLASS_END)
 com:
             type:CODE_JAVA
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:DrakonUtils.getIconType(next_node).equals(DI_SI_END) ||
DrakonUtils.getIconType(next_node).equals(DI_COMPIL_END) ||
DrakonUtils.getIconType(next_node).equals(DI_CLASS_END)
 com:
             type:CODE_JAVA
node code:null com:след узел КОНЕЦ (СИЛУЭТА,СБОРКИ,КЛАССА)? type:IF
node code:DrakonUtils.error("ЧТО ЭТО ЗА УЗЕЛ В ПРОЦЕДУРЕ?"); com:
             type:CODE_JAVA
node code:di_type == DI_NATIVE_CODE com:тек узел БЛОК КОДА? type:IF
node code:parceSheet(cur_node,level); com:
             type:CODE_JAVA
node code:null com:Разбираем блок кода type:INSERT
node code:null com:
             type:null
node code:null com:
             type:EI
node code:parceSheet(next_node,_level); com:
             type:CODE_JAVA
node code:parceShampur(next_node,_level); com:Разбираем след. блок кода type:INSERT
node code:null com:
             type:null
node code:DrakonUtils.getIconType(cur_node).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.message("--->Текущая реальность из Акт: " + CURRENT_RELEASE); com:--- type:OUTPUT
node code:DI_NATIVE_CODE com:
             type:CODE_JAVA
node code:DI_AC com:БЛОК КОДА type:CASE
node code:DrakonUtils.getIconType(out_2).equals(DI_SH_BEG)
|| DrakonUtils.getIconType(out_2).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_2).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_2).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:null com:первый выход НАЧАЛО ПРОЦЕДУРЫ или ДЕЙСТВИЕ или БЛОК КОДА? type:IF
node code:DI_NATIVE_CODE com:
             type:CODE_JAVA
node code:DI_NATIVE_CODE com:БЛОК КОДА type:CASE
node code:DI_NATIVE_CODE com:
             type:CODE_JAVA
node code:DI_NATIVE_CODE com:БЛОК КОДА type:CASE
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:DrakonUtils.message("--->префикс коментария: " + commentPrefix); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:commentPrefix = "-- "; com:
             type:CODE_JAVA
node code:data = n.data;
CURRENT_RELEASE = data["description"]; com:префикс коментария "--dg--" type:ACTION
node code:CURRENT_RELEASE != null && (CURRENT_RELEASE.equals("CODE_PLSQL") || CURRENT_RELEASE.equals("CODE_PGSQL")) com:
             type:CODE_JAVA
node code:di_type == DI_DG_BEG com:реальность CODE_PLSQL ? type:IF
node code:DrakonUtils.message("--->Текущая реальность: " + CURRENT_RELEASE); com:
             type:CODE_JAVA
node code:DrakonUtils.message("--->Текущая реальность: " + CURRENT_RELEASE); com:--- type:OUTPUT
node code:CURRENT_RELEASE = (String) DrakonUtils.getCode(v); com:извлекаем из Начало тип реальности type:ACTION
node code:DrakonUtils.message("--->Текущая реальность: " + CURRENT_RELEASE); com:--- type:OUTPUT
node code:if (i == 0) {
	cur_node_d = DrakonUtils.getOutNode(cur_node,1);
} else {
	cur_node_d = DrakonUtils.getOutNode(cur_node,0);
}
 com:получаем выход НЕТ type:ACTION
node code:!DrakonUtils.getIconType(cur_node_d).equals(DI_EI) com:выход НЕ КОНЕЦ_ЕСЛИ ? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.getCodeMark(node).length() > 0 com:
             type:CODE_JAVA
node code:DrakonUtils.getCodeMark(node) com:есть маркер? type:IF
node code:code = "\n"+commentPrefix+"<DG2J code_mark=\"" + /*n"+ (String) node.getId() + ":" +*/ DrakonUtils.getCodeMark(node) + "\" >\n"
+ code + "\n"
+ ""+commentPrefix+"</DG2J>\n";
 com:
             type:CODE_JAVA
node code:term_yes com:добавляем к коду маркер type:ACTION
node code:code = DrakonUtils.getCode(node); com:
             type:CODE_JAVA
node code:code = DrakonUtils.getCode(node); com:получаем код из текущего узла type:ACTION
node code:commentPrefix = "//--dg-- "; com:
             type:CODE_JAVA
node code:data = n.data;
CURRENT_RELEASE = data["description"]; com:префикс коментария "//--dg-- " type:ACTION
node code:		// выполняем подстановки
		String out_text  = reverseCode();
		// записываем новый файл gml
		FileUtils.fileWrite(gml_tgt_file, out_text);
		System.out.println("-- Записали файл: "+gml_tgt_file);
 com:выполняем подстановки записываем новый файл gml type:ACTION
node code:} com:
             type:PROC_END
node code:public void run() { com:run() type:PROC_BEG
node code:} //-- конец класса
 com:
             type:SI_END
node code:null com:Временно обходим проверку type:null
node code:null com:Временно обходим проверку type:null
node code:/Schemes/DrakonGen2.graphml com:Выходной graphml файл type:FILE
node code:null com:
             type:EI
node code:\src\ru\erv\drakongen\test\Test2.java com:Файл с кодами замены type:FILE
node code:return true; com:
             type:CODE_JAVA
node code:null com:
             type:DG_LIFT_DOWN
node code:null com:истина type:RETURN
node code:/Schemes/DrakonGen2.graphml com:Исходный graphml файл type:FILE
node code:DrakonUtils.getIconType(out_1).equals(DI_CASE) com:
             type:CODE_JAVA
node code:></data>";
 com:
РУЧКАМИ ВСТАВИТЬ!!!
 type:null
node code:null com:тип ВАРИАНТ? type:IF
node code:null com:
             type:EI
node code:term_no = parceNext(cur_node_d, _level + 1);
 com:обрабатываем ветку, получаем терминатор type:ACTION
node code:DI_SUB_COMPIL com:
             type:CODE_JAVA
node code:null com:ЧАСТЬ СБОРКИ type:CASE
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(out_2).equals(DI_SH_BEG)
|| DrakonUtils.getIconType(out_2).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_2).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_2).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:di_type == DI_WR_RES_FILE com:первый выход ЧАСТЬ СБОРКИ или КОНЕЦ СБОРКИ? type:IF
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:
             type:CODE_JAVA
node code:return false; com:
             type:CODE_JAVA
node code:  files.add(file_name); com:files.add(file_name); type:ACTION
node code:null com:фальшь type:RETURN
node code:} com:
             type:PROC_END
node code:str = "НАРУШЕНИЕ ПРАВИЛА Часть сборки! У иконы \"" + comment + "\" должно быть два выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:public void addCodeFile(String file_name) {
 com:addCodeFile type:PROC_BEG
node code:null com:НАРУШЕНИЕ ПРАВИЛА Часть сборки! У иконы ЧАСТЬ СБОРКИ ... должно быть 2 выхода type:OUTPUT
node code:		// устанавливаем BASE_DIR
		// Settings.setProperty("BASE_DIR", "..\\..\\..\\WRK\\DG2J\\DragonGen2J\\");
		
		// переменная rc
		ReverseCoding rc = new ReverseCoding();
		
		rc.gml_src_file = "C:/RDTEX/CB-NRD/work/schemes/DG_Algoritms_ACM.graphml";
		rc.gml_tgt_file = "C:/RDTEX/CB-NRD/work/schemes/DG_Algoritms_ACM_2.graphml";
//		rc.gml_src_file = "C:/RDTEX/CB-NRD/work/schemes/REPL_src.graphml";
//		rc.gml_tgt_file = "C:/RDTEX/CB-NRD/work/schemes/DG_Algoritms_ACM_2.graphml";
		
		rc.addCodeFile("C:/RDTEX/CB-NRD/work/base/CRC_TESTS_2_gen.sql");
		
		rc.run();
 com:экземпляр класса ReverseCoding type:ACTION
node code:null com:Правило "Часть сборки" type:null
node code:} com:
             type:PROC_END
node code:null com:выходных узлов 2? type:IF
node code:public static void main(String[] args) { com:main type:PROC_BEG
node code:null com:второй выход НАЧАЛО ПРОЦЕДУРЫ или ДЕЙСТВИЕ или БЛОК КОДА? type:IF
node code:DrakonUtils.getIconType(out_1).equals(DI_SUB_COMPIL) || DrakonUtils.getIconType(out_1).equals(DI_SI_END) com:
             type:CODE_JAVA
node code:out_1 = DrakonUtils.getOutNode(cur_node,1);
out_2 = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:null com:меняем местами выходы type:ACTION
node code:out_1 = DrakonUtils.getOutNode(cur_node,0);
out_2 = DrakonUtils.getOutNode(cur_node,1); com:
             type:CODE_JAVA
node code:null com:берем текущие выходы по порядку type:ACTION
node code:break; com:break type:BREAK
node code:return false; com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:str = "НАРУШЕНИЕ ПРАВИЛА Часть сборки!  У иконы \"" + comment + "\" неправильный тип выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА Часть сборки! У иконы ЧАСТЬ СБОРКИ ... неправильный тип выхода! type:OUTPUT
node code:null com:
             type:EI
node code:public function parseSiluet(node:NodeSprite):void {
/**
 * Парсер одного силуэта ДРАКОНА 
 * @param	var graph_data
 */
 com:Парсер одного силуэта type:SH_BEG
node code:null com:
             type:SH_END
node code:var cur_node:NodeSprite;
var data:Object;
var comment:String;
var di_type:String;
var code:String;
var type:int;
var edge:EdgeSprite;
var next_node:NodeSprite;
var level:int = 0;	

 com:переменные type:ACTION
node code:di_type == DI_SI_BEG ||
di_type == DI_COMPIL_BEG
 com:узел НАЧАЛО СИЛУЭТА? type:IF
node code:return; com:
         type:RETURN
node code:var str:String = "ОШИБКА! Первый узел шампура должен быть \"" + DI_SI_BEG + "\"!\n"
+ "А узел " + comment +" имеет тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! Первый узел шампура должен быть НАЧАЛО СИЛУЭТА type:OUTPUT
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
if(comment != null) 
	res_str += "\n"+commentPrefix + comment + "\n";
if(code != null)	
	res_str += code + "\n"; com:меняем в комментарии перевод сроки на //-- и добавляем его в результат type:ACTION
node code:break; com:
             type:CODE_JAVA
node code:cur_node.outDegree != 1 && cur_node.outDegree != 2 com:выходных ребер не 1 и не 2? type:IF
node code:return; com:
         type:RETURN
node code:null com:... type:RETURN
node code:String str = "ОТСУТСТВУЕТ КОД РЕАЛИЗАЦИИ у иконы ... \"" + DrakonUtils.getComment(node) + "\" \n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:ОТСУТСТВУЕТ КОД РЕАЛИЗАЦИИ у иконы ... ! type:OUTPUT
node code:return false; com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:str = "НАРУШЕНИЕ ПРАВИЛА Часть сборки!  У иконы \"" + comment + "\" неправильный тип выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА Часть сборки! У иконы ЧАСТЬ СБОРКИ ... неправильный тип выхода! type:OUTPUT
node code:null com:
             type:EI
node code:DrakonUtils.getIconType(out_1).equals(DI_SUB_COMPIL) || DrakonUtils.getIconType(out_1).equals(DI_SI_END) com:
             type:CODE_JAVA
node code:di_type == DI_WR_RES_FILE com:первый выход ЧАСТЬ СБОРКИ или КОНЕЦ СБОРКИ? type:IF
node code:str = "ОШИБКА! У иконы Начало Силуэта \"" + cur_node.outDegree + "\" выходов!\n"
+ " Должно быть 1 или 2.\n";
 com:формируем сообщение о ошибке type:ACTION
node code:null com:
             type:EI
node code:DrakonUtils.message(str); com:ОШИБКА! У иконы Начало Силуэта  Должно быть 1 или 2 выхода type:OUTPUT
node code:cur_node.outDegree == 2 com:выходных ребер 2? type:IF
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
di_type = edge.target.data["url"];
 com:получаем тип первго выхода type:ACTION
node code:di_type == DI_WR_RES_FILE com:на первом выходе ЗАПИСЬ В ФАЙЛ? type:IF
node code:next_node = cur_node.DrakonUtils.getOutNode(0);
cur_node = cur_node.DrakonUtils.getOutNode(1);
 com:след.узлом будет тот что на первом выходе, а текущим станет тот что на втором type:ACTION
node code:next_node = cur_node.DrakonUtils.getOutNode(1);
cur_node = cur_node.DrakonUtils.getOutNode(0);

 com:след.узлом будет тот что на втором выходе, а текущим станет тот что на первом type:ACTION
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тип тек.узла НАЧАЛО ШАМПУРА? type:IF
node code:parceShampur(cur_node, level + 1);
 com:Разбираем шампур type:INSERT
node code:next_node != null com:есть след.узел? type:IF
node code:null com:У иконы нет Коментария? type:IF
node code:null com:
             type:EI
node code:return ""; com:
             type:CODE_JAVA
node code:return code; com:"" type:RETURN
node code:DrakonUtils.getIconType(node).equals(DI_EI)  /*|| DrakonUtils.getIconType(node).equals(DI_FOR_END)*/ com:
             type:CODE_JAVA
node code:null com:икона из тех что без кода? type:IF
node code:DI_ACTION com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:DrakonUtils.message("ОШИБКА! У иконы Начало Силуэта  Должно быть 2 выхода"); com:ОШИБКА! У иконы Начало Силуэта  Должно быть 2 выхода type:OUTPUT
node code:null com:
             type:CODE_JAVA
node code:return; com:
         type:RETURN
node code:return "ОТСУТСТВУЕТ КОД РЕАЛИЗАЦИИ."; com:
             type:CODE_JAVA
node code:null com:-psi- n:  type:OUTPUT
node code:DrakonUtils.debug("-psi- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:DrakonUtils.getComment(node).equals("") com:
             type:CODE_JAVA
node code:null com:У иконы нет Коментария? type:IF
node code:null com:
             type:EI
node code:return ""; com:
             type:CODE_JAVA
node code:return code; com:"" type:RETURN
node code:DrakonUtils.getIconType(node).equals(DI_EI) /*||
DrakonUtils.getIconType(node).equals(DI_FOR_END)*/ com:
             type:CODE_JAVA
node code:null com:икона из тех что без кода? type:IF
node code:null com:
             type:EI
node code:public void parseSiluet(Vertex node) {
/**
 * Парсер одного силуэта ДРАКОНА 
 * @param	var graph_data
 */ com:
             type:CODE_JAVA
node code:return ""; com:
             type:CODE_JAVA
node code:Vertex cur_node = node;
String comment = DrakonUtils.getComment(cur_node);
String di_type;
String code = "";
Vertex next_node;
Vertex next_node2 = null;
int level = 0;
String str = "";  com:
             type:CODE_JAVA
node code:return code; com:"" type:RETURN
node code:di_type.equals(DI_SI_BEG) || di_type.equals(DI_COMPIL_BEG) com:
             type:CODE_JAVA
node code:DrakonUtils.getComment(node).equals("") com:
             type:CODE_JAVA
node code:str = "ОШИБКА! Первый узел шампура должен быть \"" + DI_SI_BEG + "\"!\n"
+ "А узел " + comment +" имеет тип " + di_type;
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
if(comment != null) 
	res_str += "\n"+commentPrefix + comment + "\n";
if(code != null)	
	res_str += code + "\n"; com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) != 1 && DrakonUtils.getOutDegree(cur_node) != 2 com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:cur_node = DrakonUtils.getOutNode(cur_node, 0); com:
             type:CODE_JAVA
node code:str = "Ошибка! У Иконы ВЫБОР \"" + comment + "\" все ребра должны вести к Case иконам!";
 com:делаем текущим узел Точка type:ACTION
node code:DrakonUtils.getOutDegree(cur_node)==1 && DrakonUtils.getIconType(DrakonUtils.getOutNode(cur_node, 0)).equals(DrakonUtils.DI_EI) com:
             type:CODE_JAVA
node code:di_type == DI_CASE com:у узла switch один выход и это Точка? type:IF
node code:null com:
             type:EI
node code:src/ru/erv/drakongen/reserv/DrakonGenGood.java com:CODE_JAVA

DrakonGenGood.java type:CODE_JAVA
node code:src/ru/erv/drakongen/DrakonGen23.java com:CODE_JAVA

DrakonGen23.java type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:
             type:CODE_JAVA
node code:null com:
             type:CODE_JAVA
node code:parceShampur(cur_node, level + 1); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:next_node != null com:
             type:CODE_JAVA
node code:return ""; com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:return code; com:"" type:RETURN
node code:return; com:
             type:CODE_JAVA
node code:di_type.equals(DI_WR_RES_FILE) com:
             type:CODE_JAVA
node code:DrakonUtils.error("ОШИБКА! У иконы Начало Силуэта  Должно быть 2 выхода"); com:
             type:CODE_JAVA
node code:Vertex v = DrakonUtils.getOutNode(cur_node,0);
di_type = DrakonUtils.getIconType(v);
 com:
             type:CODE_JAVA
node code:next_node = DrakonUtils.getOutNode(cur_node,1);
cur_node = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:next_node = DrakonUtils.getOutNode(cur_node,0);
cur_node = DrakonUtils.getOutNode(cur_node,1); com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:str = "ОШИБКА. В иконе  ЗАПИСЬ ФАЙЛА не задано имя выходного файла.\n";
res_str += str;
 com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:ОШИБКА. В иконе  ЗАПИСЬ ФАЙЛА не задано имя выходного файла. type:OUTPUT
node code:var str = "ОШИБКА. В иконе  ЗАПИСЬ ФАЙЛА не задано имя выходного файла.\n";
res_str +=  str;
 com:формируем сообщение о ошибке type:ACTION
node code:file_name != null && file_name.length() > 0 com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:file_name != null com:Имя файла задано? type:IF
node code:DrakonUtils.getIconType(cur_node).equals(DI_SH_BEG) || DrakonUtils.getIconType(cur_node).equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:str = "ОШИБКА! У иконы Начало Силуэта \"" + DrakonUtils.getOutDegree(cur_node) + "\" выходов!\n"
+ " Должно быть 1 или 2.\n"; com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(next_node).equals(DI_WR_RES_FILE) com:
             type:CODE_JAVA
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:null com:
             type:EI
node code:null com:
             type:SH_END
node code:di_type == DI_WR_RES_FILE com:узел ЗАПИСЬ В ФАЙЛ? type:IF
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:null com:
             type:EI
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:DI_AC com:ДЕСТВИЕ(ACTION) type:CASE
node code:DI_ACTION com:
             type:CODE_JAVA
node code:DI_SI_END com:КОНЕЦ СИЛУЭТА(SI_END) type:CASE
node code:DI_SI_END com:
             type:CODE_JAVA
node code:FileUtils.fileWrite(file_name, res_str); com:Запись в файл
 type:ACTION
node code:DrakonUtils.message("----> Записываем файл " + file_name + "\n"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("----> Записываем файл " + code + "\n"); com:---- type:OUTPUT
node code:= "tmp.java";
 com:
             type:CODE_JAVA
node code:file_name
 com:
             type:CODE_JAVA
node code:= "tmp.as"; com:временный файл type:ACTION
node code:var file_name com:имя файла type:ACTION
node code:= Settings.getProperty("BASE_DIR") + "\\" +  getCleanReleaseCode(next_node);
 com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:String file_name
 com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:= code; com:из иконы ЗАПИСЬ В ФАЙЛ type:ACTION
node code:DI_SH_END com:КОНЕЦ ШАМПУРА(SH_END) type:CASE
node code:var file_name com:имя файла type:ACTION
node code:DI_SH_END com:
             type:CODE_JAVA
node code:DI_SH_BEG com:НАЧАЛО ШАМПУРА(SH_BEG) type:CASE
node code:DI_SH_BEG com:
             type:CODE_JAVA
node code:null com:
             type:SH_END
node code:null com:
             type:SH_END
node code:di_type == DI_SH_END || di_type == DI_PROC_END  com:терминатор КОНЕЦ ШАМПУРА? type:IF
node code:di_type.equals(DI_SH_END) || di_type.equals(DI_PROC_END) com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:res_str += spaces +"}\n";
 com:записываем в результат "}" type:ACTION
node code:res_str += spaces +"}\n";
 com:
             type:CODE_JAVA
node code:cur_node = node;
code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:получаем параметры текущего узла type:ACTION
node code:res_str += spaces +"} else {\n";
 com:записываем в результат "} else {" type:ACTION
node code:FileUtils.fileWriteUTF8(file_name, res_str);
 com:
             type:CODE_JAVA
node code:res_str += spaces +"} else {\n";
 com:
             type:CODE_JAVA
node code:cur_node_d = edge.target; // cur_node.DrakonUtils.getOutNode(i);
term_yes = parceNext(cur_node_d, _level + 1);

 com:обрабатываем ветку Да type:ACTION
node code:cur_node_d = DrakonUtils.getOutNode(cur_node,i);
term_yes = parceNext(cur_node_d, _level + 1);
 com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:}

 com:
             type:CODE_JAVA
node code:var str = "ОШИБКА! в шампуре \"" + this_comment + "\" parceNext() вернул пусой терминатор\n";
res_str += str; com:формируем сообщение о ошибке type:ACTION
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"if(" + code + ") {\n"; com:записываем if выражение в результат then type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! в шампуре ... вернул пусой терминатор type:OUTPUT
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"if(" + code + ") then\n"; com:
             type:CODE_JAVA
node code:null com:
             type:SH_END
node code:term_yes.data["url"] == DI_SH_END &&
	 term_no.data["url"] != DI_SH_END com:первый выход КОНЕЦ ШАМПУРА а второй нет? type:IF
node code:next_node != null com:есть след.узел? type:IF
node code:term_yes = term_no; com:делаем текущим второй выход type:ACTION
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:parceShampur(next_node,_level); com:Разбираем след. шамапур type:INSERT
node code:DrakonUtils.getIconType(term_yes).equals(DI_SH_END) &&
!DrakonUtils.getIconType(term_no).equals(DI_SH_END) com:
             type:CODE_JAVA
node code:var data:Object = cur_node.data;
var code:String = geReleaseCode(cur_node);
var di_type:String = data["url"];
var comment:String = data["NodeLabel"];
var edge:EdgeSprite;
var term_yes:NodeSprite;
var next_node:NodeSprite;
var spaces:String = "";
var cur_node_d:NodeSprite; com:переменные type:ACTION
node code:cur_node == null com:текущий узел null? type:IF
node code:null com:
             type:EI
node code:return null; com:null type:RETURN
node code:term_yes = term_no; com:
             type:CODE_JAVA
node code:isCheckOutputs(cur_node)
 com:Проверка выходов проходит? type:IF
node code:isCheckOutputs(cur_node) com:
             type:CODE_JAVA
node code:return; com:
         type:RETURN
node code:var str = "\nОШИБКА! Следующий за узлом \"" + comment + "\" узел отсутствует.";
 com:формируем сообщение о ошибке type:ACTION
node code:var str:String = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +"  тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! Первый узел должен быть  НАЧАЛО ШАМПУРА type:OUTPUT
node code:DrakonUtils.message(str); com:ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы  type:OUTPUT
node code:for (var i:int = 0; i < _level; i++)  
	spaces += "\t";
 com:в строку пробелов добавляем табуляторы по глубине уровня type:ACTION
node code:str = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +" (тип " + di_type+")";
res_str += str; com:
             type:CODE_JAVA
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
 com:обрабатываем перевод строки в комментариях и коде type:ACTION
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:di_type == null || di_type.length == 0 com:тип текущего узла не задан? type:IF
node code:return; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:return node; com:node type:RETURN
node code:res_str += spaces +commentPrefix+" ПРЕДУПРЕЖДЕНИЕ! не установлен тип узла \"" + comment + "\" \n"; com:в результат добавляем  ПРЕДУПРЕЖДЕНИЕ! не установлен тип узла type:ACTION
node code:di_type com:тип узла type:SWITCH
node code:DI_AC com:ДЕСТВИЕ(AC) type:CASE
node code:if (comment != null)
	res_str += spaces +commentPrefix+  comment + "\n";
if (code != null)
	res_str += spaces +code + "\n";
 com:добавляем коментарий и код в результат type:ACTION
node code:cur_node.outDegree >= 1 com:есть выходы? type:IF
node code:null com:
             type:EI
node code:for(var i:int = 0; i < cur_node.outDegree; i++) { com:для всех выходов type:FOR_BEG
node code:null com:
             type:FOR_END
node code:et == DI_REF com:ребро ссылка-указатель? type:IF
node code:null com:
             type:EI
node code:return cur_node; com:тек. узел type:RETURN
node code:var str:String = "ОШИБКА! У Действия \"" + comment + "\" должено быть выход!\n";

 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:"ОШИБКА! У Действия ... должен быть выход. type:OUTPUT
node code:DI_IF com:УСЛОВИЕ(IF) type:CASE
node code:null com:Пропускаем все выходные ссылки-указатели и как только находим не ссылку выходим из цикла type:null
node code: = parceNext(cur_node.DrakonUtils.getOutEdge(i).target, _level); com:Разбираем ветку type:INSERT
node code:var node:NodeSprite com:node type:ACTION
node code:return node; com:node type:RETURN
node code:DI_SW com:ВЫБОР(SWITCH) type:CASE
node code:DI_CASE com:CASE type:CASE
node code:DI_EI com:КОНЕЦ УСЛОВИЯ(EI) type:CASE
node code:DI_PROC_BEG com:НАЧАЛО ПРОЦЕДУРЫ type:CASE
node code:DI_PROC_END com:КОНЕЦ ПРОЦЕДУРЫ type:CASE
node code:DI_COMPIL_END com:КОНЕЦ СБОРКИ type:CASE
node code:DI_FOR_BEG com:НАЧАЛО ЦИКЛА(FOR_BEG) type:CASE
node code:DI_FOR_END com:КОНЕЦ ЦИКЛА(FOR_END) type:CASE
node code:if (comment != null)
	res_str += spaces +commentPrefix+ comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:добавляем комент и код в результат type:ACTION
node code:return cur_node; com:тек. узел type:RETURN
node code:return cur_node; com:тек. узел type:RETURN
node code:return cur_node; com:тек. узел type:RETURN
node code:return cur_node; com:тек. узел type:RETURN
node code:var true_edge_type:String;
var di_type_edge:String;
var i = 0; com:переменные type:ACTION
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:два выхода? type:IF
node code:null com:
             type:EI
node code:var str = "ОШИБКА! У Развилки \"" + comment + "\" должено быть два выхода!\n";
res_str += spaces + str;
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! У Развилки ... должено быть два выхода! type:OUTPUT
node code:di_type_edge.toUpperCase() != "ДА" &&  di_type_edge.toUpperCase() != "YES" com:тип не Да? type:IF
node code:null com:
             type:EI
node code:return null; com:null type:RETURN
node code:str = "Ошибка! У Развилки \"" + comment + "\" должен быть Да конец!";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:Ошибка! У Развилки ... должен быть Да конец! type:OUTPUT
node code:null com:выбираем ребро которое  (Да) type:null
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
di_type_edge = edge.data["EdgeLabel"];
i = 0; com:берем первый выход, определяем его тип type:ACTION
node code:edge = cur_node.DrakonUtils.getOutEdge(1);
di_type_edge = edge.data["EdgeLabel"];
i = 1; com:не тот конец, берем следующий type:ACTION
node code:null com:
             type:EI
node code:di_type_edge.toUpperCase() != "ДА" &&  di_type_edge.toUpperCase() != "YES" com:тип не Да? type:IF
node code:null com:идем по ветке Да пока не дойдем до терминатора type:null
node code:if (term_yes.data["url"] == DI_SH_END &&
	 term_no.data["url"] != DI_SH_END) 
		term_yes = term_no; com:выбираем куда дальше идти  type:ACTION
node code:if (i == 0) {
	cur_node_d = cur_node.DrakonUtils.getOutEdge(1).target;
} else {
	cur_node_d = cur_node.DrakonUtils.getOutEdge(0).target;
}
var term_no = parceNext(cur_node_d, _level+1);

 com:обрабатываем ветку Нет type:ACTION
node code:null com:выбираем куда дальше идти, проверяем терминаторы ветки Да и ветки Нет Если терм Да уперся в конец Шампура, а терм Нет нет, то выбираем терм Нет, иначе терм Да.
 type:null
node code:null com:
             type:EI
node code:term_yes == null com:выбранный терминатор null? type:IF
node code:return null; com:null type:RETURN
node code:null com:
             type:EI
node code:term_yes.data["url"] == DI_FOR_END com:выбранный терминатор КОНЕЦ ЦИКЛА? type:IF
node code:return term_yes; com:терминатор type:RETURN
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(term_yes) == 1 com:У терминатора 1 выход? type:IF
node code:null com:
             type:EI
node code:di_type == DI_SH_END || di_type == DI_PROC_END  com:терминатор КОНЕЦ ШАМПУРА? type:IF
node code:str = commentPrefix+" ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки \"" + comment +"\" имеет "+ term_yes.outDegree +" выходов. Должен быть один. \n";
 com:формируем предупреждение type:ACTION
node code:DrakonUtils.message(str); com:ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки ... имеет ... выходов. Должен быть один. type:OUTPUT
node code:return term_yes; com:терминатор type:RETURN
node code:cur_node = term_yes.DrakonUtils.getOutNode(0); com:делаем текущим узел выхода из терминатора type:ACTION
node code: = parceNext(cur_node, _level); com:Разбираем ветку type:INSERT
node code:var node:NodeSprite com:node type:ACTION
node code:return node; com:node type:RETURN
node code:for(var i:int = 0; i < cur_node.outDegree; i++) { com:Обрабатываем все case ветки type:FOR_BEG
node code:null com:
             type:FOR_END
node code:di_type == DI_CASE com:это  CASE или DEFAULT? type:IF
node code:null com:
             type:EI
node code:edge = cur_node.DrakonUtils.getOutEdge(i);
var cur_node_d = edge.target; // cur_node.DrakonUtils.getOutNode(i);

var data:Object = cur_node_d.data;
var code:String = geReleaseCode(cur_node);
var di_type:String = data["url"]; com:получаем данные очередного рыходного узла type:ACTION
node code:return null; com:null type:RETURN
node code:str = "Ошибка! У Иконы ВЫБОР \"" + comment + "\" все ребра должны вести к Case иконам!";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:Ошибка! У Иконы ВЫБОР ... все ребра должны вести к Case иконам! type:OUTPUT
node code:res_str += spaces + str; com:записываем в результат сообщение type:ACTION
node code:= parceNext(cur_node_d, _level + 1); com:Разбираем ветку type:INSERT
node code:term_yes com:term_yes type:ACTION
node code:null com:TODO нужно бы проверять что все терминаторы у case должны быть одним и тем же type:null
node code:res_str += spaces +"}\n"; com:записываем в результат конец "}" type:ACTION
node code:null com:
             type:EI
node code:return null; com:null type:RETURN
node code:term_yes == null com:терминатор пуст? type:IF
node code:null com:Сборка класса MakeAutoCodeMark type:DG_BEG
node code:null com:Выставление auto_code_mark для всех
драконовских иконок(для которых не было введен code_mark) type:null
node code:parceShampur(cur_node, level + 1); com:
             type:CODE_JAVA
node code:parceShampur(cur_node, level + 1);
 com:Разбираем шампур type:INSERT
node code:cur_node.data["url"] == DI_SI_END com:КОНЕЦ СИЛУЭТА? type:IF
node code:null com:
             type:EI
node code:} //-- конец класса
 com:
             type:SI_END
node code:package ru.erv.drakongen;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class MakeAutoCodeMark {

	public static void main(String argv[]) {

		try {

			Document doc;
			// String in_xml = argv[0]; //--
			// "C:/ERV/PROJECTS/WRK_TestXML/TextXML/src/data/DG_Algoritms_NEW.graphml"
			// String out_xml = argv[1]; //--
			// "C:/ERV/PROJECTS/WRK_TestXML/TextXML/src/data/DG_Algoritms_NEW_2.graphml";

			String in_xml  = "C:/RDTEX/CB-NRD/work/schemes/DG_Algoritms.graphml";
			String out_xml = "C:/RDTEX/CB-NRD/work/schemes/DG_Algoritms_ACM.graphml";

			System.out
					.println("--- Выставление auto_code_mark для всех"
							+ "\n драконовских иконок(для которых не было введен code_mark)\n"
							+ "\n из файла: " + in_xml 
							+ "\n в  файл : " + out_xml);

			File fXmlFile = new File(in_xml);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(fXmlFile);

			doc.getDocumentElement().normalize();

			System.out.println("Root element :"
					+ doc.getDocumentElement().getNodeName());

			NodeList nList = doc.getElementsByTagName("node");

			int cnt = 0;
			for (int temp = 0; temp < nList.getLength(); temp++) {

				Node nNode = nList.item(temp);

				System.out.println("\nCurrent Element :" + nNode.getNodeName());

				if (nNode.getNodeType() == Node.ELEMENT_NODE) {

					Element eElement = (Element) nNode;
					String id = eElement.getAttribute("id");
					String node_type = null;
					String code_mark = null;
					Element e_node_type = null;
					Element e_code_mark = null;

					NodeList nList2 = eElement.getElementsByTagName("data");

					for (int temp2 = 0; temp2 < nList2.getLength(); temp2++) {

						Node nNode2 = nList2.item(temp2);
						Element eElement2 = (Element) nNode2;

						String key = eElement2.getAttribute("key");

						if (key.equals("d5")) {
							e_node_type = eElement2;
							node_type = eElement2.getTextContent();
						}
						if (key.equals("d4")) {
							e_code_mark = eElement2;
							code_mark = eElement2.getTextContent();
							if(code_mark == null || code_mark.equals("")) {
								CDATASection cdataNode = doc.createCDATASection("auto_code_mark_" + id);
								e_code_mark.appendChild(cdataNode);
							}
						}

					}

					System.out.println("id: " + id + "  node_type: "
							+ node_type + " code_mark:" + code_mark);

				}


			}
			
			try {
				Transformer tr = TransformerFactory.newInstance()
						.newTransformer();
				tr.setOutputProperty(OutputKeys.INDENT, "yes");
				tr.setOutputProperty(OutputKeys.METHOD, "xml");
				tr.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
				// tr.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,
				// "roles.dtd");
				// tr.setOutputProperty("{http://xml.apache.org/xslt}indent-amount",
				// "4");

				// send DOM to file
				tr.transform(new DOMSource(doc), new StreamResult(
						new FileOutputStream(out_xml)));
				System.out.println("Записан файл: "+out_xml);	
			} catch (TransformerException te) {
				System.out.println(te.getMessage());
			} catch (IOException ioe) {
				System.out.println(ioe.getMessage());
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
 com:код type:ACTION
node code:src\ru\erv\drakongen\MakeAutoCodeMark.java com:Записать в файл MakeAutoCodeMark.java type:WR_RES_FILE
node code:null com:Класс MakeAutoCodeMark type:SI_BEG
node code:CODE_PGSQL com:
             type:DG_BEG
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:DrakonUtils.getIconType(cur_node).equals(DI_SI_END) com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:CODE_PGSQL com:
             type:DG_BEG
node code:null com:
             type:null
node code:null com:
             type:null
node code:  com:"Команды UPDATE, DELETE, SELECT FOR UPDATE и SELECT FOR SHARE ведут себя подобно SELECT при поиске целевых строк: они найдут только те целевые строки, которые были зафиксированы на момент начала транзакции. Однако к моменту, когда они будут найдены, эти целевые строки могут быть уже изменены (а также удалены или заблокированы) другой параллельной транзакцией. В этом случае транзакция в режиме Repeatable Read будет ожидать фиксирования или отката первой изменяющей данные транзакции (если она ещё выполняется). Если первая изменяющая транзакция откатывается, её результат отбрасывается и текущая транзакция может продолжить изменение изначально полученной строки. Если же первая транзакция зафиксировалась и в результате изменила или удалила эту строку, а не просто заблокировала её, произойдёт откат текущей транзакции с сообщением

ОШИБКА: не удалось сериализовать доступ из-за параллельного изменения type:ACTION
node code:null com:Проект drakongen
на Github-е type:https://github.com/danmas/drakongen
node code:null com:      -- Ссылки type:null
node code:null com:
             type:DG_LIFT_UP
node code:null com:
             type:DG_LIFT_DOWN
node code:null com:
             type:null
node code:CODE_PGSQL com:
             type:DG_BEG
node code:null com:Получается, только один узел запуска активностей на диаграмму type:null
node code:null com:  type: 
node code:CODE_JAVA com:  type: 
node code:null com:  type: 
node code:null com:  type: 
node code:null com:  type: 
node code:if(edge == null)
	return false;

String di_type_edge = (String)edge.getProperty("type");
if(di_type_edge == null) return false;

if(di_type_edge.toUpperCase().equals("LABEL_CODE") )
	return true;
return false; com:строим код type:ACTION
node code:public static boolean isLabelCodeEdge(Edge edge) { com:isLabelCodeEdge() type:SH_BEG
node code:} com:
             type:SH_END
node code:if(node == null)
	return "";
return (String)node.getProperty("comment") ;
 com:строим код type:ACTION
node code:public static String getCodeFromLabel(Vertex node) { com:Возвращает код из текста узла type:SH_BEG
node code:} com:
             type:SH_END
node code:while(cur_node!=null && DrakonUtils.getIconType(cur_node).equals(DI_SUB_COMPIL)) { com:по всем ЧАСТЯМ СБОРКИ type:FOR_BEG
node code:DrakonUtils.getIconType(cur_node).equals(DI_SUB_COMPIL) com:
             type:CODE_JAVA
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тек.узел ЧАСТЬ СБОРКИ? type:IF
node code:res_str = ""; com:
             type:CODE_JAVA
node code:res_str = "";
 com:очищаем результат type:ACTION
node code:cur_node = node;
code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:
             type:CODE_JAVA
node code:parceBegGroup(cur_node, level + 1); com:
             type:CODE_JAVA
node code:cur_node = parceNext(cur_node, level + 1); com:Разбираем начальную группу type:INSERT
node code:while(cur_node!=null && DrakonUtils.getIconType(cur_node).equals(DI_SUB_COMPIL)) { com:
             type:CODE_JAVA
node code:null com:
             type:FOR_END
node code:DrakonUtils.getOutDegree(cur_node) == 2
 com:
             type:CODE_JAVA
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:у тек.узела 2 выхода? type:IF
node code:DrakonUtils.message("----> ПРЕДУПРЕЖДЕНИЕ. Результат не сохранен в файл.\n"); com:
             type:CODE_JAVA
node code:null com:---- type:OUTPUT
node code:null com:
             type:EI
node code:cur_node = com:
             type:CODE_JAVA
node code:cur_node = com:тек.узел type:ACTION
node code:next_node = cur_node.DrakonUtils.getOutNode(1);
cur_node = cur_node.DrakonUtils.getOutNode(0);

 com:след.узлом будет тот что на втором выходе, а текущим станет тот что на первом type:ACTION
node code:next_node = cur_node.DrakonUtils.getOutNode(0);
cur_node = cur_node.DrakonUtils.getOutNode(1);
 com:след.узлом будет тот что на первом выходе, а текущим станет тот что на втором type:ACTION
node code:di_type == DI_WR_RES_FILE com:на первом выходе ЧАСТЬ СБОРКИ? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(cur_node) == 1
 com:
             type:CODE_JAVA
node code:null com:у тек.узела 1 выход? type:IF
node code:parceShampur(cur_node, level + 1); com:
             type:CODE_JAVA
node code:parceShampur(cur_node, level + 1);
 com:Разбираем шампур type:INSERT
node code:next_node2 = DrakonUtils.getOutNode(cur_node,0);
cur_node = DrakonUtils.getOutNode(cur_node,1); com:
             type:CODE_JAVA
node code:next_node2 = DrakonUtils.getOutNode(cur_node,1);
cur_node = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:di_type.equals(DI_SUB_COMPIL) com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:protected function isCheckOutputs(node:NodeSprite):boolean { com:Проверка выходов иконы type:SH_BEG
node code:return code; com:истина type:SH_END
node code:null com:Проходим по всем выходам и проверяем их тип. Удаляем ссылки считам лог выходы.
graph.removeEdge(); type:null
node code:null com:
             type:EI
node code:public boolean isCheckOutputs(Vertex node) { com:
             type:CODE_JAVA
node code:return true;
}


 com:
             type:CODE_JAVA
node code:str = "Ошибка! Ошибка! У иконы ЧАСТЬ СБОРКИ \"" + comment + "\" ("+ DrakonUtils.getIconType(cur_node) + ") должен быть один или два выхода.\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:var cur_node:NodeSprite;
var data:Object;
var comment:String;
var di_type:String;
var code:String;
var type:int;
var edge:EdgeSprite;
var next_node:NodeSprite;
var level:int = 0;	

 com:переменные type:ACTION
node code:DrakonUtils.message(str); com:Ошибка! У иконы ЧАСТЬ СБОРКИ должен быть один или два выхода. type:OUTPUT
node code:cur_node = node;
code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:получаем параметры текущего узла type:ACTION
node code:Vertex cur_node;
Object data;
String comment;
String di_type;
String code;
int type;
//Edge edge;
Vertex next_node;
int level = 0;
String str = "";
Vertex out_1 = null;
Vertex out_2 = null; com:
             type:CODE_JAVA
node code:cur_node = node;
code = geReleaseCode(cur_node);
di_type = DrakonUtils.getIconType(cur_node);
comment = DrakonUtils.getComment(cur_node); com:
             type:CODE_JAVA
node code:return null; com:null type:SH_END
node code:protected function parceNext(cur_node:NodeSprite, _level:int):NodeSprite {
/**
 * @param	cur_node
 * @param	res_str
 * @return terminator - последний узел на котором закончилось движение
 */ com:Разбираем начальную группу type:SH_BEG
node code:next_node = cur_node.DrakonUtils.getOutNode(1);
cur_node = cur_node.DrakonUtils.getOutNode(0);

 com:след.узлом будет null, а текущим тот что на выходе type:ACTION
node code:return; com:
             type:CODE_JAVA
node code:return; com:
         type:RETURN
node code:next_node2;
 com:
             type:CODE_JAVA
node code:null com:след.узел type:ACTION
node code:cur_node =
 com:
             type:CODE_JAVA
node code:cur_node = com:тек.узел type:ACTION
node code:null com:
             type:EI
node code:null com:НАЧАЛО СИЛУЭТА type:CASE
node code:DI_SI_BEG com:
             type:CODE_JAVA
node code:null com:СБОРКА type:CASE
node code:DI_COMPIL_BEG com:
             type:CODE_JAVA
node code:null com:тип узла type:SWITCH
node code:di_type com:
             type:CODE_JAVA
node code:null com:выходных узлов 1? type:IF
node code:null com:Правило "Сборки-1" type:null
node code:next_node2 = null;
cur_node = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(in_node) == CURRENT_RELEASE com:выходных узлов 2? type:IF
node code:null com:
             type:EI
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:добавляем коментарий и код в результат type:ACTION
node code:DI_AC com:ДЕСТВИЕ(AC) type:CASE
node code:di_type com:тип узла type:SWITCH
node code:null com:
             type:EI
node code:di_type == null || di_type.length == 0 com:тип текущего узла не задан? type:IF
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
 com:обрабатываем перевод строки в комментариях и коде type:ACTION
node code:for (var i:int = 0; i < _level; i++)  
	spaces += "\t";
 com:в строку пробелов добавляем табуляторы по глубине уровня type:ACTION
node code:return null; com:null type:RETURN
node code:null com:
             type:EI
node code:cur_node == null com:текущий узел null? type:IF
node code:null com:Правило "Сборки-2" type:null
node code:var data:Object = cur_node.data;
var code:String = geReleaseCode(cur_node);
var di_type:String = data["url"];
var comment:String = data["NodeLabel"];
var edge:EdgeSprite;
var term_yes:NodeSprite;
var next_node:NodeSprite;
var spaces:String = "";
var cur_node_d:NodeSprite; com:переменные type:ACTION
node code:null com:ОШИБКА! У иконы СБОРКА ... не оди и не два выхода! type:OUTPUT
node code:str = "ОШИБКА! У иконы \"" + comment + "\" не оди и не два выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:return false; com:
             type:CODE_JAVA
node code:null com:получам первый выход type:ACTION
node code:out_1 = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:null com:тип вых.узла НАЧАЛО ПРОЦЕДУРЫ или ДЕЙСТВИЕ или БЛОК КОДА? type:IF
node code:null com:
             type:EI
node code:null com:НАРУШЕНИЕ ПРАВИЛА Сборка-1! У иконы СБОРКА ... неправильный тип выхода! type:OUTPUT
node code: = parceNext(cur_node.DrakonUtils.getOutEdge(i).target, _level); com:Разбираем начальную группу type:INSERT
node code:null com:Пропускаем все выходные ссылки-указатели и как только находим не ссылку выходим из цикла type:null
node code:DrakonUtils.message(str); com:"ОШИБКА! У Действия ... должен быть выход. type:OUTPUT
node code:var str:String = "ОШИБКА! У Действия \"" + comment + "\" должено быть выход!\n";

 com:формируем сообщение о ошибке type:ACTION
node code:return cur_node; com:тек. узел type:RETURN
node code:null com:
             type:EI
node code:et == DI_REF com:ребро ссылка-указатель? type:IF
node code:null com:
             type:FOR_END
node code:for(var i:int = 0; i < cur_node.outDegree; i++) { com:для всех выходов type:FOR_BEG
node code:str = "НАРУШЕНИЕ ПРАВИЛА Сборка-1! У иконы \"" + comment + "\" неправильный тип выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:фальшь type:RETURN
node code:cur_node.outDegree >= 1 com:есть выходы? type:IF
node code:return false; com:
             type:CODE_JAVA
node code:null com:другой тип type:DEFAULT
node code:DI_ACTION com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 1 com:
             type:CODE_JAVA
node code:null com:икона из тех что с одним выходом? type:IF
node code:di_type.equals(DI_ACTION) 
|| di_type.equals(DI_AC) 
|| di_type.equals(DI_EI) 
|| di_type.equals(DI_DG_BEG)
|| di_type.equals(DI_CASE)
|| di_type.equals(DI_DEFAULT)
|| di_type.equals(DI_FOR_BEG)
|| di_type.equals(DI_FOR_END)
|| di_type.equals(DI_BREAK)
|| di_type.equals(DI_OUTPUT)
|| di_type.equals(DI_INSERT) com:
             type:CODE_JAVA
node code:null com:выходных узлов 1? type:IF
node code:DrakonUtils.getOutDegree(cur_node) == 1 com:
             type:CODE_JAVA
node code:return null; com:
             type:CODE_JAVA
node code:cur_node == null com:
             type:CODE_JAVA
node code:String comment = DrakonUtils.getComment(cur_node);
String di_type = DrakonUtils.getIconType(cur_node);
String code = geReleaseCode(cur_node);
String spaces = "";
Vertex term_yes;
String str;
Vertex node;
Vertex cur_node_d;  com:
             type:CODE_JAVA
node code:protected Vertex parceBegGroup(Vertex cur_node, int _level) { com:
             type:CODE_JAVA
node code:return cur_node; com:тек. узел type:RETURN
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:добавляем комент и код в результат type:ACTION
node code:return cur_node; com:тек. узел type:RETURN
node code:DI_COMPIL_END com:КОНЕЦ СБОРКИ type:CASE
node code:null com:
             type:EI
node code:DI_PROC_BEG com:НАЧАЛО ПРОЦЕДУРЫ type:CASE
node code:null com:НАРУШЕНИЕ ПРАВИЛА! У иконы ... не один выход. type:OUTPUT
node code:return node; com:node type:RETURN
node code:str = "НАРУШЕНИЕ ПРАВИЛА! У иконы \"" + comment + "\"  не один выход.\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:var node:NodeSprite com:node type:ACTION
node code:null com:фальшь type:RETURN
node code:return false; com:
             type:CODE_JAVA
node code:null com:тип из группы RG_B или ТЕРМИНАТОР? type:IF
node code:DrakonUtils.getIconType(out_1).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_1).equals(DI_SW) 
|| DrakonUtils.getIconType(out_1).equals(DI_IF) 
|| DrakonUtils.getIconType(out_1).equals(DI_EI) 
|| DrakonUtils.getIconType(out_1).equals(DI_BREAK)
|| DrakonUtils.getIconType(out_1).equals(DI_OUTPUT)
|| DrakonUtils.getIconType(out_1).equals(DI_INSERT) com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:фальшь type:RETURN
node code:return false; com:
             type:CODE_JAVA
node code: = parceBegGroup(DrakonUtils.getOutNode(cur_node,i2), _level); com:
             type:CODE_JAVA
node code:node com:
             type:CODE_JAVA
node code:DrakonUtils.isReferenceEdge(e) com:
             type:CODE_JAVA
node code:for(int i2 = 0; i2 < DrakonUtils.getOutDegree(cur_node); i2++) { com:
             type:CODE_JAVA
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) >= 1 com:
             type:CODE_JAVA
node code:DI_AC com:
             type:CODE_JAVA
node code:DI_AC com:ВОЗВРАТ type:CASE
node code:di_type com:
             type:CODE_JAVA
node code:DI_RETURN com:
             type:CODE_JAVA
node code:di_type == null || di_type.length() == 0 com:
             type:CODE_JAVA
node code:null com:тип из группы RG_С? type:IF
node code:if(comment != null)	
	comment = comment.replace("\n",commentPrefix);
//if(code != null)	
//	code = code.replace("\n",commentPrefix);
 com:
             type:CODE_JAVA
node code:DrakonUtils.getIconType(out_1).equals(DI_PROC_END) 
|| DrakonUtils.getIconType(out_1).equals(DI_SH_END) 
|| DrakonUtils.getIconType(out_1).equals(DI_RETURN)  com:
             type:CODE_JAVA
node code:for (int i = 0; i < _level; i++)  
	spaces += "\t";
 com:
             type:CODE_JAVA
node code:null com:тип из группы RG_D? type:IF
node code:DrakonUtils.getIconType(out_1).equals(DI_FOR_BEG) 
|| DrakonUtils.getIconType(out_1).equals(DI_FOR_END) com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:di_type == DI_WR_RES_FILE com:первый выход ЗАПИСЬ В ФАЙЛ? type:IF
node code:DrakonUtils.getIconType(out_1).equals(DI_WR_RES_FILE) com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:DI_COMPIL_END com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:DI_PROC_BEG com:
             type:CODE_JAVA
node code:return null;
}

 com:
             type:CODE_JAVA
node code:return cur_node; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:второй выход НАЧАЛО ПРОЦЕДУРЫ или ДЕЙСТВИЕ? type:IF
node code:DrakonUtils.getIconType(out_2).equals(DI_SH_BEG)
|| DrakonUtils.getIconType(out_2).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_2).equals(DI_ACTION)  com:
             type:CODE_JAVA
node code:res_str += spaces + str; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:res_str += spaces + str;
 com:добавляем в результат type:ACTION
node code:null com:НАРУШЕНИЕ ПРАВИЛА Сборка-2! У иконы СБОРКА ... неправильный тип выхода! type:OUTPUT
node code:str = "ОШИБКА! У Действия \"" + comment + "\" должено быть выход!\n";
 com:
             type:CODE_JAVA
node code:str = "НАРУШЕНИЕ ПРАВИЛА Сборка-2! У иконы \"" + comment + "\" неправильный тип выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:return node; com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:return false; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:первый выход НАЧАЛО ПРОЦЕДУРЫ или ДЕЙСТВИЕ или БЛОК КОДА? type:IF
node code:DrakonUtils.getIconType(out_1).equals(DI_SH_BEG)
|| DrakonUtils.getIconType(out_1).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_1).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_1).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:НАРУШЕНИЕ ПРАВИЛА Сборка-1! У иконы СБОРКА ... неправильный тип выхода! type:OUTPUT
node code:str = "НАРУШЕНИЕ ПРАВИЛА Сборка-2! У иконы \"" + comment + "\" неправильный тип выхода!\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:DrakonUtils.debug("-pnx- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:return false; com:
             type:CODE_JAVA
node code:null com:-pnx- n:  type:OUTPUT
node code:null com:
             type:EI
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:break; com:break type:BREAK
node code:break; com:break type:ACTION
node code:null com:второй выход ЗАПИСЬ В ФАЙЛ? type:IF
node code:DrakonUtils.getIconType(out_2).equals(DI_WR_RES_FILE) com:
             type:CODE_JAVA
node code:null com:НАРУШЕНИЕ ПРАВИЛА Сборка-2! У иконы СБОРКА ... один из двух выходов должен быть ЗАПИСЬ В ФАЙЛ type:OUTPUT
node code:str = "НАРУШЕНИЕ ПРАВИЛА Сборка-2! У иконы НАЧАЛО СБОРКИ \"" + comment + "\" один из двух выходов должен быть ЗАПИСЬ В ФАЙЛ\n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:null com:фальшь type:RETURN
node code:null com:
             type:EI
node code:return false; com:
             type:CODE_JAVA
node code:term_yes.outDegree == 1 com:У терминатора 1 выход? type:IF
node code:null com:текущие выходы по порядку type:ACTION
node code:null com:
             type:EI
node code:out_1 = DrakonUtils.getOutNode(cur_node,0);
out_2 = DrakonUtils.getOutNode(cur_node,1); com:
             type:CODE_JAVA
node code:str = commentPrefix+" ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки \"" + comment +"\" имеет "+ term_yes.outDegree +" выходов. Должен быть один. \n";
 com:формируем предупреждение type:ACTION
node code:null com:
             type:EI
node code:DrakonUtils.message(str); com:ПРЕДУПРЕЖДЕНИЕ!   Терминатор развилки ... имеет ... выходов. Должен быть один. type:OUTPUT
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:
             type:CODE_JAVA
node code:return term_yes; com:терминатор type:RETURN
node code:DrakonUtils.getIconType(out_1).equals(DI_SH_BEG)
|| DrakonUtils.getIconType(out_1).equals(DI_PROC_BEG) 
|| DrakonUtils.getIconType(out_1).equals(DI_ACTION) 
|| DrakonUtils.getIconType(out_1).equals(DI_NATIVE_CODE)  com:
             type:CODE_JAVA
node code:cur_node = term_yes.DrakonUtils.getOutNode(0); com:текущий узел выход из терминатора type:ACTION
node code: = parceNext(cur_node, _level); com:Разбираем ветку type:INSERT
node code:var node:NodeSprite com:node type:ACTION
node code:return node; com:node type:RETURN
node code:null com:истина type:RETURN
node code:return true; com:
             type:CODE_JAVA
node code:DI_CASE com:DEFAULT type:CASE
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"case " + code + ":\n"; com:записываем default выражение в результат type:ACTION
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"switch(" + code + ") {\n"; com:записываем switch выражение в результат type:ACTION
node code:= parceNext(cur_node, _level + 1); com:Разбираем ветку type:INSERT
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"case " + code + ":\n"; com:записываем case выражение в результат type:ACTION
node code:term_yes com:term_yes type:ACTION
node code:= parceNext(cur_node, _level + 1); com:Разбираем ветку type:INSERT
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
cur_node = edge.target;  com:делаем текущим выход.узел  type:ACTION
node code:term_yes com:term_yes type:ACTION
node code:return term_yes; com:терминатор type:RETURN
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
cur_node = edge.target;  com:делаем текущим выход.узел  type:ACTION
node code:res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces +"default:\n"; com:
             type:CODE_JAVA
node code:return term_yes; com:терминатор type:RETURN
node code:term_yes com:
             type:CODE_JAVA
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
res_str += spaces + code +"\n"; com:записываем комментарии  и код в результат type:ACTION
node code:null com:
             type:EI
node code:str = "ОШИБКА! У Начала цикла \"" + comment + "\" должен быть один выход!\n";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! У Начала цикла ... должен быть один выход! type:OUTPUT
node code:cur_node.outDegree == 1 com:один выход? type:IF
node code:res_str += str;
 com:записываем сообщение о ошибке в результат type:ACTION
node code:return cur_node; com:тек. узел type:RETURN
node code:edge = cur_node.DrakonUtils.getOutEdge(0);
cur_node = edge.target;  com:делаем текущим выход.узел  type:ACTION
node code:= parceNext(cur_node, _level + 1); com:Разбираем ветку type:INSERT
node code:var term:NodeSprite com:терминатор type:ACTION
node code:null com:
             type:EI
node code:str = "ОШИБКА! У Цикла \"" + comment + "\" нет конца!\n";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА! У Цикла ... нет конца! type:OUTPUT
node code:term.data["url"] == DI_FOR_END com:вернулся не КОНЕЦ ЦИКЛА? type:IF
node code:res_str += str;
 com:записываем сообщение о ошибке в результат type:ACTION
node code:return term; com:терминатор type:RETURN
node code:null com:
             type:EI
node code:str = "ОШИБКА! У Цикла \"" + comment + "\" нет продолжения пути!\n";
 com:формируем сообщение о ошибке type:ACTION
node code:DrakonUtils.message(str); com:ОШИБКА: У Цикла ... нет продолжения пути. type:OUTPUT
node code:term.outDegree == 1 com:один выход у терминатора? type:IF
node code:res_str += str;
 com:записываем сообщение о ошибке в результат type:ACTION
node code:return term; com:терминатор type:RETURN
node code:cur_node = term.DrakonUtils.getOutNode(0);  com:делаем текущим выход терминатора type:ACTION
node code: = parceNext(cur_node, _level); com:Разбираем ветку type:INSERT
node code:var node:NodeSprite com:node type:ACTION
node code:return node; com:node type:RETURN
node code:res_str += spaces +"}\n";
 com:записываем в результат "}" type:ACTION
node code:public String getCleanReleaseCode(Vertex node) { com:Получение рабочего кода узла без маркера type:SH_BEG
node code:return code; com:код type:SH_END
node code:for(var i:int = 0; i < node.inDegree; i++) { com:для всех входов type:FOR_BEG
node code:null com:
             type:FOR_END
node code:DrakonUtils.getIconType(in_node) == CURRENT_RELEASE com:это узел текущей реализации? type:IF
node code:null com:
             type:EI
node code:return code; com:код type:RETURN
node code:var in_node:NodeSprite = node.getInEdge(i).source; com:получаем входной узел type:ACTION
node code:code = DrakonUtils.getCode(in_node); com:получаем код из вход. узла type:ACTION
node code:code = DrakonUtils.getCode(node); com:получаем код из текущего узла type:ACTION
node code:null com:Класс DrakonGen2 type:SI_BEG
node code:src/ru/erv/drakongen/reserv/DrakonGenGood.java com:Записать в файл
 type:WR_RES_FILE
node code:if (comment != null)
	res_str += spaces +commentPrefix + comment + "\n";
if (code != null)
res_str += spaces +code + "\n"; com:добавляем комент и код в результат type:ACTION
node code:return cur_node; com:тек. узел type:RETURN
node code:di_type == DI_SI_END ||
di_type == DI_COMPIL_END com:узел КОНЕЦ (СИЛУЭТА,СБОРКИ,КЛАССА)? type:IF
node code:null com:
             type:EI
node code:return; com:
         type:RETURN
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:добавляем в результат комментарий и код если они есть type:ACTION
node code:data = n.data;
CURRENT_RELEASE = data["description"]; com:извлекаем из Начало тип реальности type:ACTION
node code:null com:возвращает код для выбранной реальности если реаьность не выбрана, то возвращается код из иконы(код по-умолчанию) type:null
node code:CODE_AS com:Точка сборки
AS type:DG_BEG
node code:CURRENT_RELEASE != null && CURRENT_RELEASE != "" com:реализация установлена? type:IF
node code:null com:
             type:EI
node code:null com:Точка сборки type:DG_BEG
node code:Vertex cur_node;
		String comment;
		String di_type;
		String code;
		String this_comment;
		String spaces = "";
		Vertex next_node; 
 com:
             type:CODE_JAVA
node code:for (int i = 0; i < _level; i++)  
			spaces += "\t";
 com:
             type:CODE_JAVA
node code:cur_node = node;
		code= geReleaseCode(cur_node);
		di_type = DrakonUtils.getIconType(cur_node);
		comment = DrakonUtils.getComment(cur_node);
this_comment = comment; 
 com:
             type:CODE_JAVA
node code:di_type.equals(DI_SH_BEG) || di_type.equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:di_type.equals(DI_SI_END) ||
di_type.equals(DI_COMPIL_END) ||
di_type.equals(DI_CLASS_END) com:
             type:CODE_JAVA
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:protected void parceShampur(Vertex node, int  _level) { com:
             type:CODE_JAVA
node code:String str = "ОШИБКА! Первый узел должен быть " + DI_SH_BEG + " а не "+ di_type + " икона "+comment+" !";
res_str += spaces + str;
 com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:return; com:
             type:CODE_JAVA
node code:if(comment != null)
	res_str += spaces + commentPrefix + comment + "\n";
if(code != null) 
	res_str += spaces + code + " \n";
 com:
             type:CODE_JAVA
node code:DrakonUtils.getOutDegree(cur_node) == 2 com:
             type:CODE_JAVA
node code:Vertex v = DrakonUtils.getOutNode(cur_node,0);
di_type = DrakonUtils.getIconType(v);
 com:
             type:CODE_JAVA
node code:di_type.equals(DI_SH_BEG) || di_type.equals(DI_PROC_BEG) || di_type.equals(DI_SI_END) || di_type.equals(DI_COMPIL_END) ||
di_type.equals(DI_NATIVE_CODE) com:
             type:CODE_JAVA
node code:next_node = DrakonUtils.getOutNode(cur_node,0);
cur_node = DrakonUtils.getOutNode(cur_node,1); com:
             type:CODE_JAVA
node code:next_node = DrakonUtils.getOutNode(cur_node,1);
cur_node = DrakonUtils.getOutNode(cur_node,0); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:cur_node = DrakonUtils.getOutNode(cur_node,0);
next_node = null; com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:DrakonUtils.getOutDegree(cur_node) == 1 com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:String str = "ОШИБКА! Число дочерних узлов у начала шампура не равно 1 или 2\n";
 com:
             type:CODE_JAVA
node code:i.setValue(pos1);
String mark_code = getTextBetween(src_text,DrakonUtils.PREF_MARKER_CDATA,"]",i); com:выделяем маркер начиная с текущей позиции pos1 type:ACTION
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:while(true) { com:бесконечный поиск маркеров type:FOR_BEG
node code:return; com:
             type:CODE_JAVA
node code:mark_code != null com:нашли маркер?  type:IF
node code:Vertex term = parceNext(cur_node, _level + 1); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:break; com:выходим из цикла type:BREAK
node code:pos2 = src_text.indexOf(DrakonUtils.PREF_CODE_CDATA,pos1) + DrakonUtils.PREF_CODE_CDATA.length(); com:находим позицию pos2 = конец BegD от текущей позиции pos1 type:ACTION
node code:out_text += src_text.substring(pos1,pos2);  com:переносим в результат код в интервале pos1-pos2 type:ACTION
node code:term == null com:
             type:CODE_JAVA
node code:String str = "ОШИБКА! в шампуре \"" + this_comment + "\" parceNext() вернул пусой терминатор\n";
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:next_node != null com:
             type:CODE_JAVA
node code:null com:BegM type:null
node code:parceShampur(next_node,_level); com:
             type:CODE_JAVA
node code:null com:EndM type:null
node code:}

 com:
             type:CODE_JAVA
node code:null com:Mi type:null
node code:public String getCleanReleaseCode(Vertex node) { com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:CURRENT_RELEASE != null && CURRENT_RELEASE.length() != 0 com:
             type:CODE_JAVA
node code:null com:
             type:null
node code:for(int i = 0; i < DrakonUtils.getInDegree(node); i++) { com:
             type:CODE_JAVA
node code:null com:BegD type:null
node code:Vertex in_node = DrakonUtils.getInNode(node,i); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:
             type:EI
node code:String repl_text = insert_codes.get(mark_code); com:получаем новый код по текущему маркеру Mi type:ACTION
node code:null com:Di new type:null
node code:out_text += repl_text; com:добавляем в результат новый код type:ACTION
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:null com:Mi type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:BegD type:null
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:null com:Mi type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:BegD type:null
node code:null com:Di new type:null
node code:out_text += src_text.substring(pos2,src_text.length()); com:дописываем остаток в интервале pos2 - до конца type:ACTION
node code:repl_text != null com:есть новый код? type:IF
node code:null com:
             type:EI
node code:repl_text = old_code; com:новый код = старому  type:ACTION
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:null com:Mi type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:BegD type:null
node code:null com:EndD type:null
node code:null com:Di type:null
node code:null com:
             type:EI
node code:null com:... type:null
node code:pos1 = src_text.indexOf(DrakonUtils.POST_CODE_CDATA,pos2);
pos2 = pos1;
 com:устанавливаем pos1 и pos2 за концом данных type:ACTION
node code:null com:
             type:EI
node code:null com:EndD type:null
node code:null com:
             type:EI
node code:null com:
             type:null
node code:null com:
             type:FOR_END
node code:int pos1 = 0;
int pos2 = 0;
Wrapper<Integer> i = new Wrapper<Integer>(0);
Wrapper<Integer> i2 = new Wrapper<Integer>(0);
String out_text = ""; com:инициируем позиции поиска в начало pos1=0 pos2=0 type:ACTION
node code:return out_text;
} com:результат type:SH_END
node code:public String replaseMarkedCode(String src_text) { com:перенос кода с заменой по маркерам type:PROC_BEG
node code:null com:Dx type:null
node code:null com:Задача: заменить все участки Dx на Dx new по соответсвующим маркерам Mx type:null
node code:null com:Mx type:null
node code:null com:Dx new type:null
node code:null com:Mx type:null
node code:null com:Есть маркированная последовательность Маркер - Данные.  type:null
node code:null com:Маркеры и данные отмечены соответсвующими началом и концом BegM,EndM,BegD,EndD type:null
node code:null com:Маркеры все разные. Данные произвольные. type:null
node code:null com:
             type:null
node code:null com:
             type:null
node code:null com:BegM type:null
node code:null com:EndM type:null
node code:null com:BegD type:null
node code:null com:EndD type:null
node code:  System.out.println("-- Выполняются замены...");
  out_text = replaseMarkedCode(gml_text);
 com:Выполняем маркерные замены type:INSERT
node code:i.setValue(pos1);
String old_code = getTextBetween(src_text,DrakonUtils.PREF_CODE_CDATA,"]",i); com:Достаем старый код type:ACTION
node code:int pos_m = src_text.indexOf(DrakonUtils.PREF_MARKER_CDATA,pos1); com:ищем позицию маркера с позиции pos1 type:ACTION
node code:i2.setValue(pos_m-45);
String node_id = getTextBetween(src_text,PREF_NODE_ID,POST_NODE_ID,i2); com:получаем имя узла с позиции маркера - 45 type:ACTION
node code:mark_code = node_id +":" + mark_code; com:добавляем имя узла в маркер type:ACTION
node code:null com:DrakonActive v.0.0.1 type:null
node code:public DrakonAct() { com:Конструктор type:SH_BEG
node code:} com:
             type:SH_END
node code:/**
  * Этот текст сгенерирован программой DrakonGen2
  * @author Erv +
*/ com:упоминание о DrakonGen2 type:ACTION
node code:package ru.erv.drakongen;

import com.tinkerpop.blueprints.pgm.Edge;
import com.tinkerpop.blueprints.pgm.Graph;
import com.tinkerpop.blueprints.pgm.Vertex;
import ru.erv.drakongen.utils.*;
import ru.erv.drakongen.parser.GraphMLReader;
import com.tinkerpop.blueprints.pgm.impls.tg.TinkerGraph;
import japa.parser.ast.CompilationUnit;
import java.io.File;
import japa.parser.JavaParser;
 com:package
imports type:ACTION
node code: public class DrakonAct { com:class DrakonAct type:ACTION
node code:public final static String DI_OS_ACTION = "OS_ACTION";
public final static String DI_DG_LIFT_DOWN = "DG_LIFT_DOWN";
public final static String DI_DG_LIFT_UP = "DG_LIFT_UP";
public final static String DI_FILE = "FILE";
	public static enum IcTypes {
		DI_OS_ACTION, DI_DG_LIFT_UP, DI_DG_LIFT_DOWN, DI_FILE;
	};
 com:константы type:ACTION
node code:protected String CURRENT_RELEASE = DrakonUtils.RELEASE_TYPE_CODE_AS;

//private static final String BASE_DIR = "..\\..\\..\\WRK\\DG2J\\DragonGen2J\\";
private static final String MAIN_DG_FILE = "../../../WRK/DG2J/Schemes/Main.graphml";
Vertex in;

 com:переменные type:ACTION
node code:null com:
             type:FOR_END
node code:for (Vertex v : graph.getVertices()) { com:Проходим по всем узлам type:FOR_BEG
node code:DrakonUtils.getIconType(v).equals(DrakonUtils.DI_DG_BEG) com:узел НАЧАЛО? type:IF
node code:null com:
             type:EI
node code:DrakonUtils.message("--- Конец активности "); com:-- Схема построена type:OUTPUT
node code:null com:Сборка класса DrakonAct type:DG_BEG
node code:  com:Класс DrakonAct type:SI_BEG
node code:src\ru\erv\drakongen\DrakonAct.java com:Записать в файл DrakonAct.java type:WR_RES_FILE
node code:public void parseSiluet(Vertex node) {
/**
 * Парсер одного силуэта ДРАКОНА 
 * @param	var graph_data
 */ com:Парсер одного силуэта type:SH_BEG
node code:DrakonUtils.debug("-psi- n: "+DrakonUtils.getComment(node)); com:-psi- n:  type:OUTPUT
node code:DrakonUtils.error("Неизвестный тип активности  \"" + DrakonUtils.getIconType(node) + "\" узла  \"" + DrakonUtils.getComment(node) + " \".\n"); com:Неизвестный тип активности ... type:OUTPUT
node code:return; com:
         type:RETURN
node code:protected void activate_drakon_single(Graph graph) {
 com:Запускаем graph на выполнение по одному type:SH_BEG
node code:it com:тип узла type:SWITCH
node code:DI_DG_LIFT_DOWN com:DG_LIFT_DOWN type:CASE
node code:DI_DG_LIFT_UP com:DG_LIFT_UP type:CASE
node code:DI_ACTION com:
             type:CODE_JAVA
node code:DI_AC com:ДЕСТВИЕ(ACTION) type:CASE
node code:   } //-- конец класса
} //-- крнец пакета com:
             type:SI_END
node code:Edge e = DrakonUtils.getOutEdge(cur_node, i2);
 com:
             type:CODE_JAVA
node code:var et:String = cur_node.DrakonUtils.getOutEdge(i).data["url"]; com:получаем тип выхода type:ACTION
node code:DI_SH_BEG com:
             type:CODE_JAVA
node code:DI_SH_BEG com:НАЧАЛО ШАМПУРА(SH_BEG) type:CASE
node code:null com:
             type:null
node code:DI_SI_END com:
             type:CODE_JAVA
node code:DI_SI_END com:КОНЕЦ СИЛУЭТА(SI_END) type:CASE
node code:break; com:break type:BREAK
node code:null com:
             type:CODE_JAVA
node code:null com:неизвестный тип type:DEFAULT
node code:str = "Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ \"" + comment + "\" ("+ di_type + ") В НАЧАЛЬНОЙ ГРУППЕ. !n";
DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:Ошибка! НЕИЗВЕСТНЫЙ ТИП ИКОНЫ В НАЧАЛЬНОЙ ГРУППЕ  type:OUTPUT
node code:null com:
             type:EI
node code:return; com:null type:RETURN
node code:isCheckOutputs(cur_node) com:
             type:CODE_JAVA
node code:isCheckOutputs(cur_node)
 com:Проверка выходов проходит? type:IF
node code:break; com:
             type:CODE_JAVA
node code:null com:-pnx- n -2-:  type:OUTPUT
node code:null com:
             type:EI
node code:return null; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:str = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +" (тип " + di_type+")";
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы  type:OUTPUT
node code:var str:String = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +"  тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:isCheckBegGroupOutputs(cur_node) com:
             type:CODE_JAVA
node code:isCheckOutputs(cur_node)
 com:Проверка выходов нач. группы проходит? type:IF
node code:DrakonUtils.debug("-pnx- -2- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:null com:
             type:EI
node code:null com:-pnx- n -2-:  type:OUTPUT
node code:null com:
             type:EI
node code:return null; com:
             type:CODE_JAVA
node code:DrakonUtils.error(str); com:
             type:CODE_JAVA
node code:str = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +" (тип " + di_type+")";
res_str += str; com:
             type:CODE_JAVA
node code:DrakonUtils.message(str); com:ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы  type:OUTPUT
node code:var str:String = "ОШИБКА! НЕ ПРОШЛА ПРОВЕРКА ВЫХОДОВ для иконы " + comment +"  тип " + di_type;
res_str += str;
 com:формируем сообщение о ошибке type:ACTION
node code:return; com:null type:RETURN
node code:null com:Временно обходим проверку type:null
node code:DrakonUtils.debug("-pnx- -2- n: "+DrakonUtils.getComment(cur_node)); com:
             type:CODE_JAVA
node code:parceBegGroup(cur_node, level + 1); com:
             type:CODE_JAVA
node code:cur_node = parceNext(cur_node, level + 1); com:Разбираем начальную группу type:INSERT
node code:DrakonUtils.getIconType(cur_node).equals(DI_SH_BEG) || DrakonUtils.getIconType(cur_node).equals(DI_PROC_BEG) com:
             type:CODE_JAVA
node code:cur_node.data["url"] == DI_SH_BEG || cur_node.data["url"] == DI_PROC_BEG  com:тип тек.узла НАЧАЛО ШАМПУРА? type:IF
node code:DI_SUB_COMPIL com:
             type:CODE_JAVA
node code:null com:ЧАСТЬ СБОРКИ type:CASE
node code:return null; com:
             type:CODE_JAVA
node code:DrakonUtils.error("ОШИБКА! Не задан тип иконы"); com:
             type:CODE_JAVA
node code:DrakonUtils.message("ОШИБКА! Не задан тип иконы"); com:ОШИБКА! Не задан тип иконы type:OUTPUT
node code:return null; com:null type:RETURN
node code:null com:
             type:EI
--->Текущая реальность из Акт: null
---> Разбираем силуэт 
--->Текущая реальность: null
--->префикс коментария: //--dg-- 
--->Текущая реальность из Начало: null
Проверка правил выходов не выполняется  FOR_BEGикона:Проходим по всем узлам

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:Проходим по всем узлам ЗАПУСКА

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:Проходим по всем узлам

Проверка правил выходов не выполняется  FOR_ENDикона:
            

----> Записываем файл ..\develop\WRK_DragonGen2J\DragonGen2J\\src\ru\erv\drakongen\DrakonAct.java

--- Конец активности 
--->Текущая реальность из Акт: null
---> Разбираем силуэт 
--->Текущая реальность: null
--->префикс коментария: //--dg-- 
--->Текущая реальность из Начало: null
Проверка правил выходов не выполняется  FOR_BEGикона:для всех файлов из списка

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:бесконечный поиск маркеров

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:бесконечный поиск PREF_MARKER_DG2J

Проверка правил выходов не выполняется  FOR_ENDикона:
            

----> Записываем файл ..\develop\WRK_DragonGen2J\DragonGen2J\\src\ru\erv\drakongen\ReverseCoding.java

--- Конец активности 
--->Текущая реальность из Акт: CODE_JAVA
---> Разбираем силуэт 
--->Текущая реальность: CODE_JAVA
--->префикс коментария: //--dg-- 
--->Текущая реальность из Начало: CODE_JAVA
Проверка правил выходов не выполняется  FOR_BEGикона:Проходим по всем узлам

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:по всем ЧАСТЯМ СБОРКИ

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:для всех выходов

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:для всех выходов

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:Обрабатываем все case ветки

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:для всех входов

Проверка правил выходов не выполняется  FOR_ENDикона:
            

Проверка правил выходов не выполняется  FOR_BEGикона:для всех входов

Проверка правил выходов не выполняется  FOR_ENDикона:
            

----> Записываем файл ..\develop\WRK_DragonGen2J\DragonGen2J\\src/ru/erv/drakongen/DrakonGen2.java

--- Конец активности 
