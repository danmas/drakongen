<?xml version="1.0" encoding="UTF-8" ?>
<ConfigTree version="0.0.2">
<TreeNode
id="-1"
name="dg2j"
>
<properties>
</properties>
<GroovyNode
id="-1"
name="OnStartNode"
not_vis_in_user_mode="true"
>
<properties>
<groovy>
println &amp;quot;Начинаем работать. CONFEX_DIR: #{CONFEX_DIR}&amp;quot;
</groovy>
</properties>
</GroovyNode>
<VarsNode
id="-1"
name="настройки"
not_vis_in_user_mode="true"
>
<properties>
<vars>
<var name="BASE_DIR">..\..\</var><var name="SCHEMES_DIR">..\Schemes\</var></vars>
</properties>
</VarsNode>
<FolderNode
id="-1"
name="папка с кодограммами"
>
<properties>
<path>
#{SCHEMES_DIR}
</path>
</properties>
</FolderNode>
<FolderNode
id="-1"
name="папка с тестами"
>
<properties>
<path>
#{BASE_DIR}\develop\DG2J\DragonGen2J\src\ru\erv\drakongen\test
</path>
</properties>
</FolderNode>
<GroovyNode
id="-1"
name="Запуск DrakonAct из скрипта"
not_vis_in_user_mode="true"
>
<properties>
<src_file_name>
/groovy/GroovyTest.groovy
</src_file_name>
<groovy>

</groovy>
</properties>
</GroovyNode>
<ExecTreeNode
id="-1"
name="Запуск indigo-eclipse"
>
<properties>
<command>
C:\YandexDisk\FLASH\CONFEX\indigo\eclipse\eclipse.exe
</command>
</properties>
</ExecTreeNode>
<CompositeFormViewNode
id="-1"
name="Форма для запуска DrakonAct"
>
<properties>
</properties>
<VarsNode
id="-1"
name="Localisation RUS"
not_vis_in_user_mode="true"
>
<properties>
<vars>
<var name="&amp;lt;name&amp;gt;">&amp;lt;value&amp;gt;</var></vars>
</properties>
</VarsNode>
<GroovyNode
id="-1"
name="/groovy/easy_form.groovy"
not_vis_in_user_mode="true"
>
<properties>
<src_file_name>
/groovy/easy_form.groovy
</src_file_name>
</properties>
</GroovyNode>
<GroovyNode
id="-1"
name="Тест"
>
<properties>
<src_file_name>
/groovy/test.groovy
</src_file_name>
</properties>
</GroovyNode>
</CompositeFormViewNode>
<TreeNode
id="-1"
name="Разное"
not_vis_in_user_mode="true"
>
<properties>
</properties>
<JavaNode
id="-1"
name="JavaTest.java"
>
<properties>
<src_file_name>
/src/JavaTest.java
</src_file_name>
<java>
/*
*/
import ru.erv.drakongen.*;
import ru.erv.drakongen.parser.*;

import com.tinkerpop.blueprints.pgm.Graph;
import com.tinkerpop.blueprints.pgm.Vertex;
import com.tinkerpop.blueprints.pgm.impls.tg.TinkerGraph;


public class JavaTest {

	

	public void run() {
		System.err.println(&amp;quot; !!! run() &amp;quot;);
	}

	public static void main(String[] args) {
		String MAIN_DG_FILE = &amp;quot;c:/YandexDisk/FLASH/WRK/Schemes/Main.graphml&amp;quot;;
		System.out.println(&amp;quot; &amp;lt;--- ??? ??? ???  Main drakon file: &amp;quot; + MAIN_DG_FILE);
		// -- ????????????? BASE_DIR
		Settings.setProperty(&amp;quot;BASE_DIR&amp;quot;, &amp;quot;c:/YandexDisk/FLASH/WRK/DG2J/DragonGen2J/&amp;quot;);
		System.out.println(&amp;quot; &amp;lt;--- BASE_DIR: &amp;quot; + MAIN_DG_FILE);
		// -- ?????????? da
		DrakonAct da
		// -- ????????? ?????? DrakonAct
		= new DrakonAct();
		// -- ?????? Graph ?? ????? ??in
		Graph graph = new TinkerGraph();

		GraphMLReader reader = new GraphMLReader(MAIN_DG_FILE, graph);
 
		try {
			reader.read();
			System.out.println(&amp;quot; &amp;lt;--- ????????? ???? &amp;quot; + MAIN_DG_FILE);
		} catch (Exception e) {
			System.err.println(&amp;quot; err &amp;quot; + e.getMessage());
			e.printStackTrace();
		}
		// -- ?????????? ???????????
		da.activate_drakon(graph);
	}
}
</java>
</properties>
</JavaNode>
<FolderNode
id="-1"
name="ConfexDG2J"
>
<properties>
<path>
C:\YandexDisk\FLASH\WRK\ConfexDG2J
</path>
</properties>
</FolderNode>
<FolderNode
id="-1"
name="Рабочий eclipse"
>
<properties>
<path>
C:\YandexDisk\FLASH\eclipse
</path>
</properties>
</FolderNode>
<FolderNode
id="-1"
name="indigo для работы с CONFEX"
>
<properties>
<path>
C:\YandexDisk\FLASH\CONFEX
</path>
</properties>
</FolderNode>
<JavaNode
id="-1"
name="Snippet023TreeViewerCustomTooltips"
>
<properties>
<src_file_name>
/src/Snippet023TreeViewerCustomTooltips.java
</src_file_name>
<java>
/*******************************************************************************
 * Copyright (c) 2006 Tom Schindl and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Tom Schindl - initial API and implementation
 *******************************************************************************/

package org.eclipse.jface.snippets.viewers;

import java.util.ArrayList;

import org.eclipse.jface.viewers.CellLabelProvider;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TreeItem;

/**
 * A simple TreeViewer to demonstrate how custom tooltips could be created
 * easily. This is an extended version from
 * http://dev.eclipse.org/viewcvs/index.cgi/%7Echeckout%7E/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet125.java
 * 
 * This code is for users pre 3.3 others could use newly added tooltip support in
 * {@link CellLabelProvider}
 * 
 * @author Tom Schindl &amp;lt;tom.schindl@bestsolution.at&amp;gt;
 * 
 */
public class Snippet023TreeViewerCustomTooltips {
	private class MyContentProvider implements ITreeContentProvider {

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.IStructuredContentProvider#getElements(java.lang.Object)
		 */
		public Object[] getElements(Object inputElement) {
			return ((MyModel) inputElement).child.toArray();
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.IContentProvider#dispose()
		 */
		public void dispose() {

		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.IContentProvider#inputChanged(org.eclipse.jface.viewers.Viewer,
		 *      java.lang.Object, java.lang.Object)
		 */
		public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {

		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.ITreeContentProvider#getChildren(java.lang.Object)
		 */
		public Object[] getChildren(Object parentElement) {
			return getElements(parentElement);
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.ITreeContentProvider#getParent(java.lang.Object)
		 */
		public Object getParent(Object element) {
			if (element == null) {
				return null;
			}

			return ((MyModel) element).parent;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.eclipse.jface.viewers.ITreeContentProvider#hasChildren(java.lang.Object)
		 */
		public boolean hasChildren(Object element) {
			return ((MyModel) element).child.size() &amp;gt; 0;
		}

	}

	public class MyModel {
		public MyModel parent;

		public ArrayList child = new ArrayList();

		public int counter;

		public MyModel(int counter, MyModel parent) {
			this.parent = parent;
			this.counter = counter;
		}

		public String toString() {
			String rv = &amp;quot;Это Item &amp;quot;;
			if (parent != null) {
				rv = parent.toString() + &amp;quot;.&amp;quot;;
			}

			rv += counter;

			return rv;
		}
	}

	public Snippet023TreeViewerCustomTooltips(Shell shell) {
		final TreeViewer v = new TreeViewer(shell);
		v.setLabelProvider(new LabelProvider());
		v.setContentProvider(new MyContentProvider());
		v.setInput(createModel());
		v.getTree().setToolTipText(&amp;quot;&amp;quot;);

		final Listener labelListener = new Listener () {
			public void handleEvent (Event event) {
				Label label = (Label)event.widget;
				Shell shell = label.getShell ();
				switch (event.type) {
					case SWT.MouseDown:
						Event e = new Event ();
						e.item = (TreeItem) label.getData (&amp;quot;_TABLEITEM&amp;quot;);
						// Assuming table is single select, set the selection as if
						// the mouse down event went through to the table
						v.getTree().setSelection (new TreeItem [] {(TreeItem) e.item});
						v.getTree().notifyListeners (SWT.Selection, e);
						shell.dispose ();
						v.getTree().setFocus();
						break;
					case SWT.MouseExit:
						shell.dispose ();
						break;
				}
			}
		};
		
		Listener treeListener = new Listener () {
			Shell tip = null;
			Label label = null;
			public void handleEvent (Event event) {
				switch (event.type) {
					case SWT.Dispose:
					case SWT.KeyDown:
					case SWT.MouseMove: {
						if (tip == null) break;
						tip.dispose ();
						tip = null;
						label = null;
						break;
					}
					case SWT.MouseHover: {
						Point coords = new Point(event.x, event.y);
						TreeItem item = v.getTree().getItem(coords);
						if (item != null) {
							int columns = v.getTree().getColumnCount();

							for (int i = 0; i &amp;lt; columns || i == 0; i++) {
								if (item.getBounds(i).contains(coords)) {
									if (tip != null  &amp;&amp; !tip.isDisposed ()) tip.dispose ();
									tip = new Shell (v.getTree().getShell(), SWT.ON_TOP | SWT.NO_FOCUS | SWT.TOOL);
									tip.setBackground (v.getTree().getDisplay().getSystemColor (SWT.COLOR_INFO_BACKGROUND));
									FillLayout layout = new FillLayout ();
									layout.marginWidth = 2;
									tip.setLayout (layout);
									label = new Label (tip, SWT.NONE);
									label.setForeground (v.getTree().getDisplay().getSystemColor (SWT.COLOR_INFO_FOREGROUND));
									label.setBackground (v.getTree().getDisplay().getSystemColor (SWT.COLOR_INFO_BACKGROUND));
									label.setData (&amp;quot;_TABLEITEM&amp;quot;, item);
									label.setText (&amp;quot;Tooltip: &amp;quot; + item.getData()+ &amp;quot; =&amp;gt; Column: &amp;quot; + i);
									label.addListener (SWT.MouseExit, labelListener);
									label.addListener (SWT.MouseDown, labelListener);
									Point size = tip.computeSize (SWT.DEFAULT, SWT.DEFAULT);
									Rectangle rect = item.getBounds (i);
									Point pt = v.getTree().toDisplay (rect.x, rect.y);
									tip.setBounds (pt.x, pt.y, size.x, size.y);
									tip.setVisible (true);
									break;
								}
							}
						}
					}
				}
			}
		};
		v.getTree().addListener (SWT.Dispose, treeListener);
		v.getTree().addListener (SWT.KeyDown, treeListener);
		v.getTree().addListener (SWT.MouseMove, treeListener);
		v.getTree().addListener (SWT.MouseHover, treeListener);
	}

	private MyModel createModel() {

		MyModel root = new MyModel(0, null);
		root.counter = 0;

		MyModel tmp;
		for (int i = 1; i &amp;lt; 10; i++) {
			tmp = new MyModel(i, root);
			root.child.add(tmp);
			for (int j = 1; j &amp;lt; i; j++) {
				tmp.child.add(new MyModel(j, tmp));
			}
		}

		return root;
	}

	public static void main(String[] args) {
		Display display = new Display();
		Shell shell = new Shell(display);
		shell.setLayout(new FillLayout());
		new Snippet023TreeViewerCustomTooltips(shell);
		shell.open();

		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}

		display.dispose();
	}
}
</java>
</properties>
</JavaNode>
</TreeNode>
</TreeNode>
<TreeNode
id="-1"
name="J2EE"
>
<properties>
</properties>
<FolderNode
id="-1"
name="JavaSE7_Cert"
>
<properties>
<path>
C:\Java\JavaSE7_Cert
</path>
</properties>
</FolderNode>
<ExecTreeNode
id="-1"
name="cmd"
>
<properties>
<command>
cmd.exe
</command>
<work_dir>
C:\Java\JavaSE7_Cert\
</work_dir>
</properties>
</ExecTreeNode>
</TreeNode>
</ConfigTree>
